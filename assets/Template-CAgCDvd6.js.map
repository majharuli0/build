{"version":3,"mappings":"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","names":["generateNumberData","_","i","generatePercentageData","generateDurationData","getSummaryData","apiFunction","query","response","error","React","BarChart","MultiBarChart","TimelineGraph","TimelineBar","RateChart","n","DayRateChart","ScatterChart","RangePicker","SingleDatePicker","DatePicker","convertDurationToMinutes","duration","hours","minutes","seconds","SummaryModal","visible","onClose","modalData","summaryProps","fromDate","setFromDate","useState","toDate","setToDate","selectedPickerType","setSelectedPickerType","chartData","setChartData","responseData","setResponseData","avgLabels","setAvgLabels","sleepEventsType","sleepEventsColor","useContext","SidebarContext","context","CustomContext","elderlyDetails","handleWeeklyMonthly","e","handleDatePicker","dates","dateStrings","handleDayPicker","date","dateString","generateSleepEventsData","data","events","eventCounts","acc","event_type","type","count","filteredDataForBedExitDuration","item","totalBedExitDuration","_a","total","listItem","value","filteredDataForTimeToFallAsleep","totalDuration","sum","sleepItem","filteredDataForHeartRateAnnomaly","result","eventDate","ev","existingEntry","entry","filteredDataForDurationSpentInRoom","prepareLabelData","labelData","aggregatedEvents","startTime","durationInMinutes","statusName","name","averages","avgdata","dayData","status","ratio","avgMinutes","event","eventName","existingEvent","currentValue","avgData","average","prepareChartData","transformedData","useEffect","fetchData","res","_b","_c","renderPickers","jsx","WeeklyMonthlyPicker","dayjs","chartConfig","formatTimeWithSuffix","transformTime","transformDataDailyRoutine","transformDataForBedExit","renderChart","chartType","chartConfigEntry","ChartComponent","getProps","Suspense","Modal","jsxs","indx","arr","TotalItem","label","isFirst","isLast","Template","children","title","color","icon","dataAnalysis","isDataAnalysis","isSummaryBtn","headerClassName","isSummaryModalOpen","setIsSummaryModalOpen","Fragment","Button","FileOutlined"],"ignoreList":[],"sources":["../../src/Components/SummaryModal/mockData.js","../../src/Components/SummaryModal/getSummaryData.jsx","../../src/Components/SummaryModal/SummaryModal.jsx","../../src/Components/GraphAndChartTemp/Template.jsx"],"sourcesContent":["// Function to generate random number data\r\nconst generateNumberData = () => {\r\n  return Array.from({ length: 12 }, (_, i) => ({\r\n    date: `2023-10-${String(i * 2 + 1).padStart(2, \"0\")}`,\r\n    value: Math.floor(Math.random() * 100) + 1, // Random value between 1 and 100\r\n  }));\r\n};\r\n\r\n// Function to generate random percentage data\r\nconst generatePercentageData = () => {\r\n  return Array.from({ length: 12 }, (_, i) => ({\r\n    date: `2023-10-${String(i * 2 + 2).padStart(2, \"0\")}`,\r\n    value: Math.floor(Math.random() * 100) + 1, // Random value between 1 and 100\r\n  }));\r\n};\r\n\r\n// Function to generate random duration data (in minutes)\r\nconst generateDurationData = () => {\r\n  return Array.from({ length: 12 }, (_, i) => ({\r\n    date: `2023-10-${String(i * 2 + 1).padStart(2, \"0\")}`,\r\n    value: Math.floor(Math.random() * 180) + 1, // Random value between 1 and 180 minutes\r\n  }));\r\n};\r\n\r\n// Assigning generated data to constants\r\nexport const numberData = generateNumberData();\r\nexport const percentageData = generatePercentageData();\r\nexport const durationData = generateDurationData();\r\n","function getSummaryData(apiFunction, query) {\r\n  if (typeof apiFunction !== \"function\") {\r\n    console.error(\"apiFunction is not a function or is undefined\");\r\n    return Promise.reject(new Error(\"apiFunction is not a function\"));\r\n  }\r\n  return apiFunction(query)\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"API Request Error:\", error);\r\n      throw error;\r\n    });\r\n}\r\n\r\nexport default getSummaryData;\r\n","import React, { useState, useEffect, Suspense, useContext } from \"react\";\r\nimport { Modal, DatePicker } from \"antd\";\r\nimport \"./style.css\";\r\nimport WeeklyMonthlyPicker from \"@/Components/WeeklyMonthlyPicker/WeeklyMonthlyPicker\";\r\nimport { Table } from \"antd\";\r\nimport targetIcon from \"@/assets/icon/target.svg\";\r\nimport p0 from \"@/assets/icon/p0.svg\";\r\nimport p1 from \"@/assets/icon/p1.svg\";\r\nimport p2 from \"@/assets/icon/p2.svg\";\r\nimport { formatTimeWithSuffix, transformDataForBedExit } from \"@/utils/helper\";\r\n\r\nimport { IoMdArrowDropup } from \"react-icons/io\";\r\nconst DataAnalysis = React.lazy(() =>\r\n  import(\"@/Components/DataAnalysis/DataAnalysis\")\r\n);\r\nconst BarChart = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/barChart\")\r\n);\r\nconst MultiBarChart = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/multibarChart\")\r\n);\r\nconst TimelineGraph = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/TimelineGraph\")\r\n);\r\nconst TimelineBar = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/TimelineBar\")\r\n);\r\nconst LiveRateChart = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/LiveRateChart\")\r\n);\r\nconst RateChart = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/RateChart\")\r\n);\r\nconst DayRateChart = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/DayRateChart\")\r\n);\r\nconst ScatterChart = React.lazy(() =>\r\n  import(\"@/Components/GraphAndChart/scatterChart\")\r\n);\r\nimport dayjs from \"dayjs\";\r\nimport { SidebarContext } from \"@/Context/CustomContext\";\r\nimport { transformTime, transformDataDailyRoutine } from \"@/utils/helper\";\r\nconst { RangePicker, DatePicker: SingleDatePicker } = DatePicker;\r\nimport { durationData } from \"./mockData\";\r\nimport getSummaryData from \"./getSummaryData\";\r\nimport { CustomContext } from \"@/Context/UseCustomContext\";\r\n\r\nfunction convertDurationToMinutes(duration) {\r\n  const [hours, minutes, seconds] = duration.split(\":\").map(Number);\r\n  return hours * 60 + minutes + seconds / 60;\r\n}\r\nexport default function SummaryModal({\r\n  visible,\r\n  onClose,\r\n  modalData,\r\n  summaryProps,\r\n}) {\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n  const [selectedPickerType, setSelectedPickerType] = useState(null);\r\n  const [chartData, setChartData] = useState([]);\r\n  const [responseData, setResponseData] = useState([]);\r\n  const [avgLabels, setAvgLabels] = useState([]);\r\n  const { sleepEventsType, sleepEventsColor } = useContext(SidebarContext);\r\n  const context = useContext(CustomContext);\r\n  const { elderlyDetails } = context || {};\r\n  function handleWeeklyMonthly(e) {\r\n    setFromDate(e.end);\r\n    setToDate(e.start);\r\n    setSelectedPickerType(\"weeklyMonthly\");\r\n  }\r\n\r\n  function handleDatePicker(dates, dateStrings) {\r\n    setFromDate(dateStrings[1] || \"\");\r\n    setToDate(dateStrings[0] || \"\");\r\n    setSelectedPickerType(\"range\");\r\n  }\r\n\r\n  function handleDayPicker(date, dateString) {\r\n    setFromDate(null);\r\n    setToDate(dateString || \"\");\r\n    setSelectedPickerType(\"day\");\r\n  }\r\n  function generateSleepEventsData(data) {\r\n    return data.map(({ date, events }) => {\r\n      const eventCounts = events.reduce((acc, { event_type }) => {\r\n        acc[event_type] = (acc[event_type] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      const data = Object.entries(eventCounts).map(([type, count]) => ({\r\n        name: sleepEventsType[type],\r\n        value: `${count}`,\r\n        status: type,\r\n        color: sleepEventsColor[type],\r\n      }));\r\n\r\n      return { date, data };\r\n    });\r\n  }\r\n  function filteredDataForBedExitDuration(data) {\r\n    if (!Array.isArray(data)) {\r\n      console.error(\"Invalid data format: Expected an array.\");\r\n      return [];\r\n    }\r\n\r\n    const newData = data.map((item) => {\r\n      // Calculate the total duration from sleep_index_common_list\r\n      const totalBedExitDuration =\r\n        item.sleep_index_common_list?.reduce((total, listItem) => {\r\n          const value = Number(listItem?.value) || 0; // Convert value to a number\r\n          return total + value;\r\n        }, 0) || \"0\"; // Default to 0 if no valid values are present\r\n\r\n      return {\r\n        date: item?.date || null, // Default to null if date is missing\r\n        bed_exit_duration: totalBedExitDuration, // Total duration as a number\r\n      };\r\n    });\r\n\r\n    return newData;\r\n  }\r\n  function filteredDataForTimeToFallAsleep(data) {\r\n    const filteredData = data.map((item) => {\r\n      const totalDuration = item.sleep_index_common_list.reduce(\r\n        (sum, sleepItem) => sum + parseInt(sleepItem.value, 10),\r\n        0\r\n      );\r\n      return {\r\n        date: item.date,\r\n        totalFallAsleepDuration: totalDuration,\r\n      };\r\n    });\r\n    return filteredData;\r\n  }\r\n  function filteredDataForHeartRateAnnomaly(data) {\r\n    const result = [];\r\n    data?.forEach((item) => {\r\n      const eventDate = item.date;\r\n      item?.events?.forEach((ev) => {\r\n        if (ev.event_type === 14 || ev.event_type === 15) {\r\n          // Check if the event date already exists in the result array\r\n          const existingEntry = result.find(\r\n            (entry) => entry.date === eventDate\r\n          );\r\n\r\n          if (existingEntry) {\r\n            // If the date exists, increment the total event count for that date\r\n            existingEntry.anomalyHeartRate += 1;\r\n          } else {\r\n            // If the date doesn't exist, create a new entry for that date\r\n            result.push({ date: eventDate, anomalyHeartRate: 1 });\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  function filteredDataForDurationSpentInRoom(data) {\r\n    const result = [];\r\n    data?.forEach((item) => {\r\n      const date = item.date;\r\n      const entry = {\r\n        date: date,\r\n        data: [],\r\n      };\r\n\r\n      // Manually set status for specific fields and store them as objects\r\n      if (item.still_time !== undefined) {\r\n        entry.data.push({\r\n          name: \"still_time\",\r\n          value: item.still_time,\r\n          status: \"30\", // Set status for still_time\r\n        });\r\n      }\r\n\r\n      if (item.walk_duration !== undefined) {\r\n        entry.data.push({\r\n          name: \"walking_duration\",\r\n          value: convertDurationToMinutes(item.walk_duration),\r\n          status: \"31\", // Set status for walking_duration\r\n        });\r\n      }\r\n\r\n      if (item.other_duration !== undefined) {\r\n        entry.data.push({\r\n          name: \"other_duration\",\r\n          value: convertDurationToMinutes(item.other_duration),\r\n          status: \"32\", // Set status for other_duration\r\n        });\r\n      }\r\n\r\n      // Push the formatted entry into the result array\r\n      result.push(entry);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  function prepareLabelData(data) {\r\n    let labelData = [];\r\n    if (!data) setAvgLabels([]);\r\n    if (\r\n      summaryProps?.title === \"Breath Rate Summary\" ||\r\n      summaryProps?.title === \"Heart Rate Summary\"\r\n    ) {\r\n      if (!fromDate && data[0]?.avg) {\r\n        labelData = [\r\n          {\r\n            name: \"Avg. Breath Rate\",\r\n            value: data[0]?.avg,\r\n          },\r\n          {\r\n            name: \"Min. Breath Rate\",\r\n            value: data[0]?.min,\r\n          },\r\n          {\r\n            name: \"Max. Breath Rate\",\r\n            value: data[0]?.max,\r\n          },\r\n        ];\r\n      } else {\r\n        // labelData = data[0]?.map((item) => ({\r\n        //   name: item.name,\r\n        //   value: item.value,\r\n        // }));\r\n      }\r\n    } else if (summaryProps?.title === \"Sleep Timeline Summary\") {\r\n      if (data[0]?.statistical_data && toDate && fromDate == null) {\r\n        //it's for day\r\n        const aggregatedEvents = data[0]?.statistical_data.reduce(\r\n          (acc, data) => {\r\n            const startTime = new Date(data.start_time);\r\n            const endTime = new Date(data.end_time);\r\n            const durationInMinutes = (endTime - startTime) / (1000 * 60); // Duration in minutes\r\n            const statusName = sleepEventsType[data.status];\r\n\r\n            if (!acc[statusName]) {\r\n              acc[statusName] = {\r\n                duration: 0,\r\n              };\r\n            }\r\n\r\n            acc[statusName].duration += durationInMinutes;\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n\r\n        labelData = Object.entries(aggregatedEvents).map(\r\n          ([name, { duration }]) => {\r\n            const hours = Math.floor(duration / 60);\r\n            const minutes = Math.floor(duration % 60);\r\n            return {\r\n              name,\r\n              value: `${hours}hr ${minutes}m`, // Format duration\r\n            };\r\n          }\r\n        );\r\n      } else {\r\n        const averages = {};\r\n        const avgdata = data.map((item) => ({\r\n          ...{ data: item.sleep_index_common_list, date: item.date },\r\n        }));\r\n        avgdata?.forEach((dayData) => {\r\n          dayData?.data?.forEach(({ name, value, status, ratio }) => {\r\n            if (!averages[status]) {\r\n              averages[status] = {\r\n                name: `Avg. ${sleepEventsType[status]}`,\r\n                totalValue: 0,\r\n                totalRatio: 0,\r\n                count: 0,\r\n              };\r\n            }\r\n            averages[status].totalValue += parseInt(value);\r\n            averages[status].totalRatio += ratio;\r\n            averages[status].count += 1;\r\n          });\r\n        });\r\n\r\n        labelData = Object.entries(averages).map(([status, data]) => {\r\n          const avgMinutes = Math.round(data.totalValue / data.count);\r\n          const hours = Math.floor(avgMinutes / 60);\r\n          const minutes = avgMinutes % 60;\r\n\r\n          return {\r\n            name: data.name,\r\n            value: `${hours}hr ${minutes}m`,\r\n            ratio: Math.round(data.totalRatio / data.count),\r\n          };\r\n        });\r\n      }\r\n    } else if (summaryProps?.title === \"Sleep Events Summary\") {\r\n      if (data[0]?.events && toDate && fromDate == null) {\r\n        const alarmEventCounts = data[0]?.events.reduce((acc, event) => {\r\n          const eventName = sleepEventsType[event.event_type];\r\n          const existingEvent = acc.find((e) => e.name === eventName);\r\n          if (existingEvent) {\r\n            // Remove 'x', increment, then add 'x' back\r\n            const currentValue = parseInt(existingEvent.value.replace(\"x\", \"\"));\r\n            existingEvent.value = `${currentValue + 1}x`;\r\n          } else {\r\n            acc.push({\r\n              name: eventName,\r\n              value: \"1x\",\r\n              color: sleepEventsColor[eventName],\r\n            });\r\n          }\r\n          return acc;\r\n        }, []);\r\n\r\n        labelData = alarmEventCounts;\r\n      } else {\r\n        const averages = {};\r\n        const avgData = generateSleepEventsData(data);\r\n        avgData?.forEach((dayData) => {\r\n          dayData?.data?.forEach(({ name, value, status }) => {\r\n            if (!averages[status]) {\r\n              averages[status] = {\r\n                name: `Avg. ${sleepEventsType[status]}`,\r\n                totalValue: 0,\r\n                count: 0,\r\n              };\r\n            }\r\n            averages[status].totalValue += parseInt(value);\r\n            averages[status].count += 1; // Increment counter\r\n          });\r\n        });\r\n\r\n        labelData = Object.entries(averages).map(([status, data]) => {\r\n          const average = Math.round(data.totalValue / data.count); // Calculate average\r\n          return {\r\n            name: data.name,\r\n            value: `${average}x`, // Add 'x' suffix to match format\r\n          };\r\n        });\r\n      }\r\n    }\r\n\r\n    setAvgLabels(labelData);\r\n    return labelData;\r\n  }\r\n\r\n  function prepareChartData(data) {\r\n    if (!data) setChartData([]);\r\n    if (summaryProps?.title === \"Sleep Timeline Summary\") {\r\n      if (toDate && fromDate) {\r\n        const chartData = data.map((item) => ({\r\n          ...{ data: item.sleep_index_common_list, date: item.date },\r\n        }));\r\n        setChartData(chartData);\r\n      } else {\r\n        setChartData(data[0]);\r\n      }\r\n    } else if (summaryProps?.title === \"Sleep Events Summary\") {\r\n      const transformedData = generateSleepEventsData(data);\r\n      setChartData(transformedData);\r\n    } else if (\r\n      summaryProps?.title === \"Breathing Rate Overview Summary\" ||\r\n      summaryProps?.title === \"Heart Rate Overview Summary\"\r\n    ) {\r\n      if (fromDate && toDate) {\r\n        const transformedData = {\r\n          xdata: data.map((item) => item.date),\r\n          maxArray: data.map((item) => item.max),\r\n          minArray: data.map((item) => item.min),\r\n          allAvgNumber: Math.round(\r\n            data.reduce((sum, item) => sum + item.avg, 0) / data.length\r\n          ),\r\n        };\r\n        setChartData(transformedData);\r\n      }\r\n    } else if (summaryProps?.title === \"Bed Exit Duration Overview Summary\") {\r\n      const transformedData = filteredDataForBedExitDuration(data);\r\n      return transformedData;\r\n    } else if (summaryProps?.title === \"Time to Fall Asleep Overview Summary\") {\r\n      const transformedData = filteredDataForTimeToFallAsleep(data);\r\n      return transformedData;\r\n    } else if (\r\n      summaryProps?.title === \"Heart Rate Variation Overview Summary\"\r\n    ) {\r\n      const transformedData = filteredDataForHeartRateAnnomaly(data);\r\n      return transformedData;\r\n    } else if (\r\n      summaryProps?.title === \"Room Occupancy Duration Overview Summary\"\r\n    ) {\r\n      const transformedData = filteredDataForDurationSpentInRoom(data);\r\n      setChartData(transformedData);\r\n    }\r\n    // setChartData(data);\r\n    return data;\r\n  }\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (summaryProps?.apisProps?.endpoint) {\r\n        try {\r\n          const res = await getSummaryData(summaryProps?.apisProps?.endpoint, {\r\n            ...summaryProps?.apisProps?.query,\r\n            elderly_id: elderlyDetails?._id,\r\n            from_date: fromDate,\r\n            to_date: toDate,\r\n          });\r\n          if (res && res?.data) {\r\n            setResponseData(prepareChartData(res?.data));\r\n            prepareLabelData(res?.data);\r\n            prepareChartData(res?.data);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching summary data:\", error);\r\n          setResponseData([]);\r\n        }\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [summaryProps?.apisProps?.endpoint, fromDate, toDate]);\r\n\r\n  const renderPickers = () => {\r\n    return summaryProps?.pickerTypes?.map((type) => {\r\n      switch (type) {\r\n        case \"weeklyMonthly\":\r\n          return (\r\n            <WeeklyMonthlyPicker\r\n              key=\"weeklyMonthly\"\r\n              placeholder={\"Weekly/Monthly\"}\r\n              style={{ width: \"140px\", borderRadius: \"10px\" }}\r\n              handleChnage={handleWeeklyMonthly}\r\n              value={\r\n                selectedPickerType === \"weeklyMonthly\" && toDate && fromDate\r\n                  ? { start: toDate, end: fromDate }\r\n                  : null\r\n              }\r\n            />\r\n          );\r\n        case \"range\":\r\n          return (\r\n            <RangePicker\r\n              key=\"range\"\r\n              showTime={false}\r\n              style={{ width: \"200px\", borderRadius: \"10px\" }}\r\n              size=\"large\"\r\n              placeholder={[\"Pick Data Range (Start)\", \"End\"]}\r\n              format=\"YYYY-MM-DD\"\r\n              onChange={(value, dateString) =>\r\n                handleDatePicker(value, dateString)\r\n              }\r\n              value={\r\n                selectedPickerType === \"range\" && fromDate && toDate\r\n                  ? [dayjs(toDate), dayjs(fromDate)]\r\n                  : null\r\n              }\r\n              allowClear={true}\r\n            />\r\n          );\r\n        case \"day\":\r\n          return (\r\n            <DatePicker\r\n              key=\"day\"\r\n              style={{ width: \"200px\", borderRadius: \"10px\" }}\r\n              size=\"large\"\r\n              format=\"YYYY-MM-DD\"\r\n              onChange={(date, dateString) => handleDayPicker(date, dateString)}\r\n              value={\r\n                selectedPickerType === \"day\" && toDate ? dayjs(toDate) : null\r\n              }\r\n              allowClear={true}\r\n            />\r\n          );\r\n        default:\r\n          return null;\r\n      }\r\n    });\r\n  };\r\n\r\n  const chartConfig = {\r\n    multibar: {\r\n      default: {\r\n        component: MultiBarChart,\r\n        getProps: () => ({\r\n          data: chartData,\r\n          toDate: fromDate,\r\n          fromDate: toDate,\r\n          valueType: summaryProps?.dataType,\r\n        }),\r\n      },\r\n      day: {\r\n        component: TimelineGraph,\r\n        getProps: () => ({\r\n          statisticalData: chartData?.statistical_data,\r\n          enterBedTime: formatTimeWithSuffix(chartData?.get_bed_idx),\r\n          getupAfterTime: formatTimeWithSuffix(chartData?.leave_bed_idx),\r\n        }),\r\n      },\r\n    },\r\n    multibar_sleep_events: {\r\n      default: {\r\n        component: MultiBarChart,\r\n        getProps: () => ({\r\n          data: chartData,\r\n          toDate: fromDate,\r\n          fromDate: toDate,\r\n          valueType: summaryProps?.dataType,\r\n        }),\r\n      },\r\n      day: {\r\n        component: TimelineBar,\r\n        getProps: () => ({\r\n          alarmEvents: responseData[0]?.events,\r\n          enterBedTime: transformTime(responseData[0]?.get_bed_idx),\r\n          getupAfterTime: transformTime(responseData[0]?.leave_bed_idx),\r\n        }),\r\n      },\r\n    },\r\n    bar: {\r\n      default: {\r\n        component: BarChart,\r\n        getProps: () => ({\r\n          data: responseData,\r\n          dataType: summaryProps?.dataType,\r\n          color: summaryProps?.color,\r\n          xUnit: summaryProps?.xUnit,\r\n          toDate: summaryProps?.isFromToDate ? fromDate : \"\",\r\n          fromDate: summaryProps?.isFromToDate ? toDate : \"\",\r\n          numberLimit: summaryProps?.numberLimit,\r\n          dataUnit: summaryProps?.dataUnit,\r\n          chartFor: summaryProps?.chartFor,\r\n        }),\r\n      },\r\n    },\r\n    rate: {\r\n      default: {\r\n        component: RateChart,\r\n        getProps: () => ({\r\n          cheartInfo: chartData,\r\n          color: summaryProps?.color,\r\n          dateType: \"Month\",\r\n          fromDate: toDate,\r\n          toDate: fromDate,\r\n        }),\r\n      },\r\n      day: {\r\n        component: DayRateChart,\r\n        getProps: () => ({\r\n          data: responseData[0]?.data_list || [],\r\n          timestamp: responseData[0]?.timestamps || [],\r\n          color: summaryProps?.color,\r\n          type: summaryProps?.dataType,\r\n        }),\r\n      },\r\n    },\r\n    scatter: {\r\n      default: {\r\n        component: ScatterChart,\r\n        getProps: () => ({\r\n          data:\r\n            summaryProps?.title !== \"Distribution of bed exit times Summary\"\r\n              ? transformDataDailyRoutine(responseData)\r\n              : transformDataForBedExit(responseData),\r\n          colors: {\r\n            gotobed: \"#2EC7C9\",\r\n            wakeup: \"#5AB1EF\",\r\n            getup: \"#FFB980\",\r\n            fallasleep: \"#B6A2DE\",\r\n            bedexit: \"#508C9B\",\r\n          },\r\n        }),\r\n      },\r\n    },\r\n  };\r\n\r\n  const renderChart = () => {\r\n    const chartType = summaryProps?.chartType;\r\n    const chartConfigEntry =\r\n      chartConfig[chartType]?.[selectedPickerType] ||\r\n      chartConfig[chartType]?.default;\r\n\r\n    if (!chartConfigEntry) return null;\r\n\r\n    const { component: ChartComponent, getProps } = chartConfigEntry;\r\n\r\n    return (\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <ChartComponent {...getProps()} />\r\n      </Suspense>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={visible}\r\n      onCancel={onClose}\r\n      footer={null}\r\n      width=\"100%\"\r\n      style={{ height: \"100vh\", padding: 0, borderRadius: 0, top: 0 }}\r\n      className=\"!rounded-none summaryModal !h-[100vh] overflow-hidden\"\r\n    >\r\n      <div className=\"p-4 h-[100vh]\">\r\n        <div className=\"flex flex-col justify-center items-center mb-4 gap-2\">\r\n          <h2 className=\"text-2xl font-bold text-primary\">\r\n            {summaryProps?.title}\r\n          </h2>\r\n          <div\r\n            id=\"DatePickers\"\r\n            className=\"flex gap-4 items-center justify-center mt-4\"\r\n          >\r\n            {renderPickers()}\r\n          </div>\r\n        </div>\r\n        {avgLabels.length > 0 && (\r\n          <div\r\n            id=\"chartTotal\"\r\n            className=\"flex w-full items-center justify-center border-b mt-12\"\r\n          >\r\n            {avgLabels.map((item, indx, arr) => (\r\n              <TotalItem\r\n                key={indx}\r\n                label={item.name}\r\n                value={item.value}\r\n                isFirst={indx === 0}\r\n                isLast={indx === arr.length - 1}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"report-content max-h-[350px]  w-[90%] mt-16 mx-auto\">\r\n          {renderChart()}\r\n        </div>\r\n\r\n        {/* data table  */}\r\n        {/* <div className=\"w-[90%] mx-auto mt-6\">\r\n          <Table dataSource={data} columns={columns} pagination={false} />\r\n        </div> */}\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport const TotalItem = ({ label, value, isFirst, isLast }) => {\r\n  return (\r\n    <div\r\n      id=\"totalItem\"\r\n      className={`max-w-[160px] w-full border p-1 flex items-center justify-center border-b-0 flex-col ${\r\n        isFirst && isLast\r\n          ? \"rounded-tl-xl rounded-tr-xl\"\r\n          : isFirst\r\n          ? \"rounded-tl-xl\"\r\n          : isLast\r\n          ? \"rounded-tr-xl\"\r\n          : \"\"\r\n      }`}\r\n    >\r\n      <h1 className=\"text-2xl font-bold text-primary\">{value}</h1>\r\n      <span className=\"text-sm font-medium opacity-80 text-primary\">\r\n        {label}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const columns = [\r\n  {\r\n    title: \"Item\",\r\n    render: (row) => (\r\n      <div className=\"text-primary px-[11px] text-base font-semibold\">\r\n        {row.event}\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Target\",\r\n    render: (row) => (\r\n      <div className=\"text-primary px-[11px] text-base font-semibold flex items-center gap-1\">\r\n        <img src={targetIcon} alt=\"target\" />\r\n        {row.target}x\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Value\",\r\n    render: (row) => (\r\n      <div className=\"text-primary px-[11px] text-base font-semibold\">\r\n        {row.value}x\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Trend\",\r\n    render: (row) => (\r\n      <div className=\"w-full h-[10px]  px-[11px] text-base font-semibold flex items-center gap-2\">\r\n        <img\r\n          src={row.value - row.target > 0 ? p1 : p0}\r\n          alt=\"trend\"\r\n          className=\"w-[16px] h-[16px]\"\r\n        />\r\n        {row.value - row.target}x\r\n      </div>\r\n    ),\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    render: (row) => (\r\n      <div\r\n        className={`w-full h-[10px] flex items-center gap-2 px-[11px] text-base font-semibold ${\r\n          row.status === \"1\"\r\n            ? \"text-yellow-500\"\r\n            : row.status === \"2\"\r\n            ? \"text-red-500\"\r\n            : \"text-blue-500\"\r\n        } `}\r\n      >\r\n        {row.status === \"0\"\r\n          ? \"Good\"\r\n          : row.status === \"1\"\r\n          ? \"Warning\"\r\n          : \"Critical\"}\r\n        {row.status === \"0\" && (\r\n          <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div> // Circle\r\n        )}\r\n        {row.status === \"1\" && (\r\n          <IoMdArrowDropup size={26} className=\"text-yellow-500\" />\r\n        )}\r\n        {row.status === \"2\" && (\r\n          <IoMdArrowDropup size={26} className=\"text-red-500\" />\r\n        )}\r\n      </div>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const data = [\r\n  {\r\n    event: \"Sleep Apnea\",\r\n    value: \"10\",\r\n    target: \"7\",\r\n    status: \"1\",\r\n  },\r\n];\r\n","import { useState } from \"react\";\r\nimport { FileOutlined } from \"@ant-design/icons\";\r\nimport { Button } from \"antd\";\r\nimport { BsMoonStarsFill } from \"react-icons/bs\";\r\nimport SummaryModal from \"../SummaryModal/SummaryModal\";\r\n\r\nexport default function Template({\r\n  children,\r\n  title,\r\n  color,\r\n  icon,\r\n  dataAnalysis,\r\n  isDataAnalysis = true,\r\n  isSummaryBtn = true,\r\n  summaryProps,\r\n  headerClassName,\r\n}) {\r\n  const [isSummaryModalOpen, setIsSummaryModalOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <div className=\"flex flex-col gap-6 p-6 bg-white rounded-2xl !w-full h-full \">\r\n        <div id=\"header\" className=\"flex justify-between items-center w-full\">\r\n          <h1\r\n            className={`text-[21px] font-bold text-primary ${headerClassName}`}\r\n          >\r\n            {title}\r\n          </h1>\r\n          {isSummaryBtn && (\r\n            <Button\r\n              onClick={() => setIsSummaryModalOpen(true)}\r\n              icon={<FileOutlined />}\r\n              size=\"large\"\r\n            >\r\n              Summary\r\n            </Button>\r\n          )}\r\n        </div>\r\n        <div className=\"h-full\">{children}</div>\r\n\r\n        {isDataAnalysis && dataAnalysis !== \"\" && (\r\n          <div id=\"footer\" className=\"flex gap-3 items-center p-2 px-3\">\r\n            {/* <div\r\n            id=\"bar\"\r\n            style={{ backgroundColor: color }}\r\n            className=\"w-[3px] h-full rounded-full\"\r\n          ></div> */}\r\n            <div\r\n              id=\"icon\"\r\n              style={{\r\n                color: \"white\",\r\n                fontSize: \"20px\",\r\n                backgroundColor: color,\r\n              }}\r\n              className=\"p-2 rounded-full\"\r\n            >\r\n              {icon}\r\n            </div>\r\n            <span className=\"text-[15px] capitalize\">{dataAnalysis}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <SummaryModal\r\n        visible={isSummaryModalOpen}\r\n        onClose={() => setIsSummaryModalOpen(false)}\r\n        summaryProps={{ ...summaryProps, color, icon }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"file":"assets/Template-CAgCDvd6.js"}