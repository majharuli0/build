import{r as j,j as A,bq as V}from"./index-DKEPlPMw.js";import{E as q}from"./index-C88mHCLz.js";import"./helper-DzRZPsxz.js";function H({data:l,dataType:b,color:m,chartType:x="Day",toDate:y,fromDate:k,xUnit:p="date",hourLimit:D=12,numberLimit:B=100,dataUnit:z="",chartFor:f=""}){const S=j.useMemo(()=>{if(!(l!=null&&l.length))return null;function I(t){const i=Array.from({length:67},(s,u)=>{const $=60+u*10,v=Math.floor($/60),w=$%60;return w===0?`${v} hr`:`${v} hr ${w} min`}),a=new Array(i.length).fill(0);t==null||t.forEach(s=>{const u=Math.floor((s.sleep_total_time-60)/10);u>=0&&u<a.length&&a[u]++});const o=a.reduce((s,u)=>s+u,0),c=a.map(s=>o>0?(s/o*100).toFixed(0):"0");return{xaxis:i,data:c}}function E(t){const i=Array.from({length:10},(s,u)=>`${0+u*10}-${0+(u+1)*10}`),a=new Array(i.length).fill(0);t==null||t.forEach(s=>{const u=Math.floor(f!=="deepSleepPercentageDistribution"?(s==null?void 0:s.sleep_efficiency)/10:(s==null?void 0:s.sleep_quality)/10);u>=0&&u<a.length&&a[u]++});const o=t.length,c=a.map(s=>o>0?(s/o*100).toFixed(0):"0");return{xaxis:i,data:c}}function R(t){const e=Array.from({length:6},(c,s)=>`${s*5}-${(s+1)*5}`),i=new Array(e.length).fill(0);t==null||t.forEach(c=>{const s=parseFloat(c.ahi),u=Math.floor(s/5);u>=0&&u<i.length&&i[u]++});const a=t.length,o=i.map(c=>a>0?(c/a*100).toFixed(0):"0");return{xaxis:e,data:o}}function M(t){const e=Array.from({length:12},(c,s)=>`${s*10}-${(s+1)*10}`),i=new Array(e.length).fill(0);t==null||t.forEach(c=>{const s=c.totalFallAsleepDuration,u=Math.floor(s/10);u>=0&&u<i.length&&i[u]++});const a=t.length,o=i.map(c=>a>0?(c/a*100).toFixed(0):"0");return{xaxis:e,data:o}}function C(t){const n={xaxis:Array.from({length:31},(e,i)=>i+6).map(e=>e.toString()),data:Array(31).fill(0)};return t.forEach(e=>{const i=e.data_list.filter(o=>o!=="-1"&&o!=="0").map(Number),a=i.length;i.forEach(o=>{if(o>=6&&o<=36){const c=o-6;n.data[c]++}}),n.data=n.data.map(o=>(o/a*100).toFixed(0))}),n}const d=["45-50","50-55","55-60","60-65","65-70","70-75","75-80","80-85","85-90","90-95","95-100","100-105","105-110","110-115","115-120"],O=t=>{const r=new Array(d.length).fill(0);t==null||t.forEach(i=>{i.data_list.forEach(a=>{if(a>0)for(let o=0;o<d.length;o++){const[c,s]=d[o].split("-").map(Number);if(a>=c&&a<s){r[o]+=1;break}}})});const n=t==null?void 0:t.reduce((i,a)=>i+a.data_list.filter(o=>o>0).length,0),e=r.map(i=>(i/n*100).toFixed(0));return{xaxis:d,data:e}},g=(()=>{if(p==="number"){if(f==="apneaIndexDistribution"){const{xaxis:t,data:r}=R(l);return t.map((n,e)=>({number:n,value:r[e]}))}else if(f==="heartRateDistribution"){const{xaxis:t,data:r}=O(l);return t.map((n,e)=>({number:n,value:r[e]}))}else if(f==="breathRateDistribution"){const{xaxis:t,data:r}=C(l);return t.map((n,e)=>({number:n,value:r[e]}))}}if(p==="hour")if(l&&l.length>0&&f==="durationDistribution"){const{xaxis:t,data:r}=I(l);return t.map((n,e)=>({hour:n,percentage:parseInt(n,10),value:r[e]}))}else if(l&&l.length>0&&f==="fallAsleepDurationDistribution"){const{xaxis:t,data:r}=M(l);return t.map((n,e)=>({hour:n,percentage:parseInt(n,10),value:r[e]}))}else return Array.from({length:D},(t,r)=>({hour:r,value:0,percentage:0}));else if(p==="percentage")if(f==="efficiencyDistribution"||f==="deepSleepPercentageDistribution"){const{xaxis:t,data:r}=E(l);return console.log("data===================>",l),t.map((n,e)=>({percentage:n,value:r[e]}))}else{const t=Array.from({length:11},(n,e)=>e*10),r=new Map(l.map(n=>[Math.floor(n.sleep_efficiency/10)*10,{value:n.sleep_efficiency,date:n.date}]));return t.map(n=>{var e,i;return{percentage:n,value:((e=r.get(n))==null?void 0:e.value)||0,date:((i=r.get(n))==null?void 0:i.date)||null}})}else{const r=((e,i)=>{const a=[],o=new Date(e),c=new Date(i);for(;o<=c;)a.push(new Date(o).toISOString().split("T")[0]),o.setDate(o.getDate()+1);return a})(k,y),n=new Map(l.map(e=>[e.date.split("T")[0],e.ratio||e.walk_speed||e.bed_exit_duration||e.value||e.sleep_time||e.ahi||e.anomalyHeartRate||e.sleep_efficiency||(e.leave_bed_count&&f==="numberOfBedExitTime"?e.leave_bed_count:null)||(e.sleep_quality&&f!=="numberOfBedExitTime"&&f!=="roomInOut"&&f==="deepSleepPercentageStatistic"?e.sleep_quality:null)||(e.entry_exit_count&&f==="roomInOut"?e.entry_exit_count:null)||f==="sleedDurationStatistic"&&e.sleep_total_time||e.totalFallAsleepDuration||"--"]));return r.map(e=>({date:e,value:n.get(e)||0}))}})(),_=(t,r="axis")=>{if(p==="percentage"||b==="percentage")return`${t}%`;if(b==="duration"){const n=Math.floor(t/60),e=t%60;return n>0?`${n}h ${e}m`:`${e}m`}return t},h=t=>{if(p==="number")return t==null?void 0:t.toString();if(p==="hour")return`${t}`;if(p==="percentage")return`${t}%`;if(x==="Week"){const n=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],e=new Date(t);return n[e.getDay()]}return new Date(t).toLocaleDateString("en-US",{month:"2-digit",day:"2-digit"}).replace("/","-")};return{xAxis:{type:"category",data:g.map(t=>h(p==="hour"?t.hour:p==="percentage"?t.percentage:p==="number"?t.number:t.date))},grid:{top:"5%",left:"8%",bottom:"5%",right:"2%"},yAxis:{type:"value",axisLabel:{formatter:_},max:p==="percentage"||b==="percentage"?100:void 0},series:[{data:g.map(t=>t.value),type:"bar",barWidth:10,itemStyle:{color:m||"#000",borderRadius:[50,50,0,0]}}],tooltip:{trigger:"axis",formatter:t=>{if(p==="number")if(f!=="apneaIndexDistribution"){const e=g[t[0].dataIndex];return`<div style="margin-top: 4px">
              <span >${e.value}%</span>
              <br>
              <span style="font-weight: bold">${e.number} BPM</span>
              </div>`}else{const e=g[t[0].dataIndex];return`<div style="margin-top: 4px">
              <span style="font-weight: bold">${e.value}%</span>
              <br>
              <span style="font-weight: normal">${e.number}</span>
              </div>`}else if(p==="hour"){const e=g[t[0].dataIndex];return`<div style="margin-top: 4px">
                    ${e.value?`<span>${e.value}%</span>`:"--"}
                    <br>
                    <span style="font-weight: bold">${e.hour}</span>
                    </div>`}else if(p==="percentage"){const e=g[t[0].dataIndex];if(e.date){const i=new Date(e.date).toLocaleDateString("en-US",{year:"numeric",month:"2-digit",day:"2-digit"}).replace(/\//g,"-");return`<div style="font-weight: bold">${e.value}%</div>
                     <div style="margin-top: 4px">${i}</div>`}return`<div style="font-weight: bold"> ${e.value}% <br/> <span style="font-weight: normal">${e.percentage}%</span></div>`}const r=g[t[0].dataIndex].date;return`<div style="font-weight: bold">${new Date(r).toLocaleDateString("en-US",{year:"numeric",month:"2-digit",day:"2-digit"}).replace(/\//g,"-")}</div>
                  <div style="margin-top: 4px">${_(t[0].value)}${z}</div>`}}}},[l,b,m,x,k,y,p,D,B]);return!(l!=null&&l.length)||!S?A.jsx(V,{description:"No data available to show"}):A.jsx(q,{option:S,style:{height:"350px"}})}export{H as default};
