{"version":3,"mappings":"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","names":["generateNumberData","_","i","generatePercentageData","generateDurationData","getSummaryData","apiFunction","query","response","error","React","BarChart","MultiBarChart","TimelineGraph","TimelineBar","RateChart","n","DayRateChart","ScatterChart","RangePicker","SingleDatePicker","DatePicker","convertDurationToMinutes","duration","hours","minutes","seconds","SummaryModal","visible","onClose","modalData","summaryProps","fromDate","setFromDate","useState","toDate","setToDate","selectedPickerType","setSelectedPickerType","chartData","setChartData","responseData","setResponseData","avgLabels","setAvgLabels","sleepEventsType","sleepEventsColor","useContext","SidebarContext","context","CustomContext","elderlyDetails","handleWeeklyMonthly","e","handleDatePicker","dates","dateStrings","handleDayPicker","date","dateString","generateSleepEventsData","data","events","eventCounts","acc","event_type","type","count","filteredDataForBedExitDuration","item","totalBedExitDuration","_a","total","listItem","value","filteredDataForTimeToFallAsleep","totalDuration","sum","sleepItem","filteredDataForHeartRateAnnomaly","result","eventDate","ev","existingEntry","entry","filteredDataForDurationSpentInRoom","dayjs","_b","_c","_d","_e","_f","prepareLabelData","labelData","aggregatedEvents","startTime","durationInMinutes","statusName","name","formatTimeWithSuffix","averages","avgdata","dayData","status","ratio","avgMinutes","event","eventName","existingEvent","currentValue","avgData","average","prepareChartData","transformedData","useEffect","fetchData","res","renderPickers","jsx","WeeklyMonthlyPicker","chartConfig","transformTime","transformDataDailyRoutine","transformDataForBedExit","renderChart","chartType","chartConfigEntry","ChartComponent","getProps","Suspense","Modal","jsxs","indx","arr","TotalItem","label","isFirst","isLast","Template","children","title","color","icon","dataAnalysis","isDataAnalysis","isSummaryBtn","headerClassName","isSummaryModalOpen","setIsSummaryModalOpen","Fragment","Button","FileOutlined"],"ignoreList":[],"sources":["../../src/Components/SummaryModal/mockData.js","../../src/Components/SummaryModal/getSummaryData.jsx","../../src/Components/SummaryModal/SummaryModal.jsx","../../src/Components/GraphAndChartTemp/Template.jsx"],"sourcesContent":["// Function to generate random number data\nconst generateNumberData = () => {\n  return Array.from({ length: 12 }, (_, i) => ({\n    date: `2023-10-${String(i * 2 + 1).padStart(2, \"0\")}`,\n    value: Math.floor(Math.random() * 100) + 1, // Random value between 1 and 100\n  }));\n};\n\n// Function to generate random percentage data\nconst generatePercentageData = () => {\n  return Array.from({ length: 12 }, (_, i) => ({\n    date: `2023-10-${String(i * 2 + 2).padStart(2, \"0\")}`,\n    value: Math.floor(Math.random() * 100) + 1, // Random value between 1 and 100\n  }));\n};\n\n// Function to generate random duration data (in minutes)\nconst generateDurationData = () => {\n  return Array.from({ length: 12 }, (_, i) => ({\n    date: `2023-10-${String(i * 2 + 1).padStart(2, \"0\")}`,\n    value: Math.floor(Math.random() * 180) + 1, // Random value between 1 and 180 minutes\n  }));\n};\n\n// Assigning generated data to constants\nexport const numberData = generateNumberData();\nexport const percentageData = generatePercentageData();\nexport const durationData = generateDurationData();\n","function getSummaryData(apiFunction, query) {\n  if (typeof apiFunction !== \"function\") {\n    console.error(\"apiFunction is not a function or is undefined\");\n    return Promise.reject(new Error(\"apiFunction is not a function\"));\n  }\n  return apiFunction(query)\n    .then((response) => {\n      return response;\n    })\n    .catch((error) => {\n      console.error(\"API Request Error:\", error);\n      throw error;\n    });\n}\n\nexport default getSummaryData;\n","import React, { useState, useEffect, Suspense, useContext } from \"react\";\nimport { Modal, DatePicker } from \"antd\";\nimport \"./style.css\";\nimport WeeklyMonthlyPicker from \"@/Components/WeeklyMonthlyPicker/WeeklyMonthlyPicker\";\nimport { Table } from \"antd\";\nimport targetIcon from \"@/assets/icon/target.svg\";\nimport p0 from \"@/assets/icon/p0.svg\";\nimport p1 from \"@/assets/icon/p1.svg\";\nimport p2 from \"@/assets/icon/p2.svg\";\nimport { formatTimeWithSuffix, transformDataForBedExit } from \"@/utils/helper\";\n\nimport { IoMdArrowDropup } from \"react-icons/io\";\nconst DataAnalysis = React.lazy(() =>\n  import(\"@/Components/DataAnalysis/DataAnalysis\")\n);\nconst BarChart = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/barChart\")\n);\nconst MultiBarChart = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/multibarChart\")\n);\nconst TimelineGraph = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/TimelineGraph\")\n);\nconst TimelineBar = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/TimelineBar\")\n);\nconst LiveRateChart = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/LiveRateChart\")\n);\nconst RateChart = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/RateChart\")\n);\nconst DayRateChart = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/DayRateChart\")\n);\nconst ScatterChart = React.lazy(() =>\n  import(\"@/Components/GraphAndChart/scatterChart\")\n);\nimport dayjs from \"dayjs\";\nimport { SidebarContext } from \"@/Context/CustomContext\";\nimport { transformTime, transformDataDailyRoutine } from \"@/utils/helper\";\nconst { RangePicker, DatePicker: SingleDatePicker } = DatePicker;\nimport { durationData } from \"./mockData\";\nimport getSummaryData from \"./getSummaryData\";\nimport { CustomContext } from \"@/Context/UseCustomContext\";\n\nfunction convertDurationToMinutes(duration) {\n  const [hours, minutes, seconds] = duration.split(\":\").map(Number);\n  return hours * 60 + minutes + seconds / 60;\n}\nexport default function SummaryModal({\n  visible,\n  onClose,\n  modalData,\n  summaryProps,\n}) {\n  const [fromDate, setFromDate] = useState(\"\");\n  const [toDate, setToDate] = useState(\"\");\n  const [selectedPickerType, setSelectedPickerType] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [responseData, setResponseData] = useState([]);\n  const [avgLabels, setAvgLabels] = useState([]);\n  const { sleepEventsType, sleepEventsColor } = useContext(SidebarContext);\n  const context = useContext(CustomContext);\n  const { elderlyDetails } = context || {};\n  function handleWeeklyMonthly(e) {\n    setFromDate(e.end);\n    setToDate(e.start);\n    setSelectedPickerType(\"weeklyMonthly\");\n  }\n\n  function handleDatePicker(dates, dateStrings) {\n    setFromDate(dateStrings[1] || \"\");\n    setToDate(dateStrings[0] || \"\");\n    setSelectedPickerType(\"range\");\n  }\n\n  function handleDayPicker(date, dateString) {\n    setFromDate(null);\n    setToDate(dateString || \"\");\n    setSelectedPickerType(\"day\");\n  }\n  function generateSleepEventsData(data) {\n    return data.map(({ date, events }) => {\n      const eventCounts = events.reduce((acc, { event_type }) => {\n        acc[event_type] = (acc[event_type] || 0) + 1;\n        return acc;\n      }, {});\n\n      const data = Object.entries(eventCounts).map(([type, count]) => ({\n        name: sleepEventsType[type],\n        value: `${count}`,\n        status: type,\n        color: sleepEventsColor[type],\n      }));\n\n      return { date, data };\n    });\n  }\n  function filteredDataForBedExitDuration(data) {\n    if (!Array.isArray(data)) {\n      console.error(\"Invalid data format: Expected an array.\");\n      return [];\n    }\n\n    const newData = data.map((item) => {\n      // Calculate the total duration from sleep_index_common_list\n      const totalBedExitDuration =\n        item.sleep_index_common_list?.reduce((total, listItem) => {\n          const value = Number(listItem?.value) || 0; // Convert value to a number\n          return total + value;\n        }, 0) || \"0\"; // Default to 0 if no valid values are present\n\n      return {\n        date: item?.date || null, // Default to null if date is missing\n        bed_exit_duration: totalBedExitDuration, // Total duration as a number\n      };\n    });\n\n    return newData;\n  }\n  function filteredDataForTimeToFallAsleep(data) {\n    const filteredData = data.map((item) => {\n      const totalDuration = item.sleep_index_common_list.reduce(\n        (sum, sleepItem) => sum + parseInt(sleepItem.value, 10),\n        0\n      );\n      return {\n        date: item.date,\n        totalFallAsleepDuration: totalDuration,\n      };\n    });\n    return filteredData;\n  }\n  function filteredDataForHeartRateAnnomaly(data) {\n    const result = [];\n    data?.forEach((item) => {\n      const eventDate = item.date;\n      item?.events?.forEach((ev) => {\n        if (ev.event_type === 14 || ev.event_type === 15) {\n          // Check if the event date already exists in the result array\n          const existingEntry = result.find(\n            (entry) => entry.date === eventDate\n          );\n\n          if (existingEntry) {\n            // If the date exists, increment the total event count for that date\n            existingEntry.anomalyHeartRate += 1;\n          } else {\n            // If the date doesn't exist, create a new entry for that date\n            result.push({ date: eventDate, anomalyHeartRate: 1 });\n          }\n        }\n      });\n    });\n    return result;\n  }\n  function filteredDataForDurationSpentInRoom(data) {\n    const result = [];\n    console.log(data);\n\n    data?.forEach((item) => {\n      const date = dayjs(item.datestr).subtract(1, \"day\").format(\"YYYY-MM-DD\");\n      const entry = {\n        date: date,\n        data: [],\n      };\n\n      // Manually set status for specific fields and store them as objects\n      if (item?.user_activity?.static_duration !== undefined) {\n        entry.data.push({\n          name: \"still_time\",\n          value: convertDurationToMinutes(item?.user_activity?.static_duration),\n          status: \"30\", // Set status for still_time\n        });\n      }\n\n      if (item?.user_activity?.walk_duration !== undefined) {\n        entry.data.push({\n          name: \"walking_duration\",\n          value: convertDurationToMinutes(item?.user_activity?.walk_duration),\n          status: \"31\", // Set status for walking_duration\n        });\n      }\n\n      if (item?.user_activity?.other_duration !== undefined) {\n        entry.data.push({\n          name: \"other_duration\",\n          value: convertDurationToMinutes(item?.user_activity?.other_duration),\n\n          status: \"32\",\n        });\n      }\n\n      // Push the formatted entry into the result array\n      result.push(entry);\n    });\n\n    return result;\n  }\n\n  function prepareLabelData(data) {\n    let labelData = [];\n    if (!data) setAvgLabels([]);\n    if (\n      summaryProps?.title === \"Breath Rate Summary\" ||\n      summaryProps?.title === \"Heart Rate Summary\"\n    ) {\n      if (!fromDate && data[0]?.avg) {\n        labelData = [\n          {\n            name: \"Avg. Breath Rate\",\n            value: data[0]?.avg,\n          },\n          {\n            name: \"Min. Breath Rate\",\n            value: data[0]?.min,\n          },\n          {\n            name: \"Max. Breath Rate\",\n            value: data[0]?.max,\n          },\n        ];\n      } else {\n        // labelData = data[0]?.map((item) => ({\n        //   name: item.name,\n        //   value: item.value,\n        // }));\n      }\n    } else if (summaryProps?.title === \"Sleep Timeline Summary\") {\n      if (data[0]?.statistical_data && toDate && fromDate == null) {\n        //it's for day\n        console.log(data[0]);\n\n        const aggregatedEvents = data[0]?.statistical_data.reduce(\n          (acc, data) => {\n            const startTime = new Date(data.start_time);\n            const endTime = new Date(data.end_time);\n            const durationInMinutes = (endTime - startTime) / (1000 * 60); // Duration in minutes\n            const statusName = sleepEventsType[data.status];\n\n            if (!acc[statusName]) {\n              acc[statusName] = {\n                duration: 0,\n              };\n            }\n            acc[statusName].duration += durationInMinutes;\n            return acc;\n          },\n          {}\n        );\n\n        labelData = Object.entries(aggregatedEvents).map(\n          ([name, { duration }]) => {\n            const hours = Math.floor(duration / 60);\n            const minutes = Math.floor(duration % 60);\n            return {\n              name,\n              value: `${hours}hr ${minutes}m`, // Format duration\n            };\n          }\n        );\n        labelData = [\n          {\n            name: \"Fell Asleep\",\n            value: formatTimeWithSuffix(data[0]?.sleep_st_idx),\n          },\n          ...labelData,\n          {\n            name: \"Bed Exit After Sleep\",\n            value: data[0]?.leave_bed_count + \"x\",\n          },\n          {\n            name: \"Wake Up\",\n            value: formatTimeWithSuffix(data[0]?.sleep_ed_idx),\n          },\n        ];\n      } else {\n        const averages = {};\n        const avgdata = data.map((item) => ({\n          ...{ data: item.sleep_index_common_list, date: item.date },\n        }));\n        avgdata?.forEach((dayData) => {\n          dayData?.data?.forEach(({ name, value, status, ratio }) => {\n            if (!averages[status]) {\n              averages[status] = {\n                name: `Avg. ${sleepEventsType[status]}`,\n                totalValue: 0,\n                totalRatio: 0,\n                count: 0,\n              };\n            }\n            averages[status].totalValue += parseInt(value);\n            averages[status].totalRatio += ratio;\n            averages[status].count += 1;\n          });\n        });\n\n        labelData = Object.entries(averages).map(([status, data]) => {\n          const avgMinutes = Math.round(data.totalValue / data.count);\n          const hours = Math.floor(avgMinutes / 60);\n          const minutes = avgMinutes % 60;\n\n          return {\n            name: data.name,\n            value: `${hours}hr ${minutes}m`,\n            ratio: Math.round(data.totalRatio / data.count),\n          };\n        });\n      }\n    } else if (summaryProps?.title === \"Sleep Events Summary\") {\n      if (data[0]?.events && toDate && fromDate == null) {\n        const alarmEventCounts = data[0]?.events.reduce((acc, event) => {\n          const eventName = sleepEventsType[event.event_type];\n          const existingEvent = acc.find((e) => e.name === eventName);\n          if (existingEvent) {\n            // Remove 'x', increment, then add 'x' back\n            const currentValue = parseInt(existingEvent.value.replace(\"x\", \"\"));\n            existingEvent.value = `${currentValue + 1}x`;\n          } else {\n            acc.push({\n              name: eventName,\n              value: \"1x\",\n              color: sleepEventsColor[eventName],\n            });\n          }\n          return acc;\n        }, []);\n\n        labelData = alarmEventCounts;\n      } else {\n        const averages = {};\n        const avgData = generateSleepEventsData(data);\n        avgData?.forEach((dayData) => {\n          dayData?.data?.forEach(({ name, value, status }) => {\n            if (!averages[status]) {\n              averages[status] = {\n                name: `Avg. ${sleepEventsType[status]}`,\n                totalValue: 0,\n                count: 0,\n              };\n            }\n            averages[status].totalValue += parseInt(value);\n            averages[status].count += 1; // Increment counter\n          });\n        });\n\n        labelData = Object.entries(averages).map(([status, data]) => {\n          const average = Math.round(data.totalValue / data.count); // Calculate average\n          return {\n            name: data.name,\n            value: `${average}x`, // Add 'x' suffix to match format\n          };\n        });\n      }\n    }\n\n    setAvgLabels(labelData);\n    return labelData;\n  }\n\n  function prepareChartData(data) {\n    if (!data) setChartData([]);\n    if (summaryProps?.title === \"Sleep Timeline Summary\") {\n      if (toDate && fromDate) {\n        const chartData = data.map((item) => ({\n          ...{ data: item.sleep_index_common_list, date: item.date },\n        }));\n        setChartData(chartData);\n      } else {\n        setChartData(data[0]);\n      }\n    } else if (summaryProps?.title === \"Sleep Events Summary\") {\n      const transformedData = generateSleepEventsData(data);\n      setChartData(transformedData);\n    } else if (\n      summaryProps?.title === \"Breathing Rate Overview Summary\" ||\n      summaryProps?.title === \"Heart Rate Overview Summary\"\n    ) {\n      if (fromDate && toDate) {\n        const transformedData = {\n          xdata: data.map((item) => item.date),\n          maxArray: data.map((item) => item.max),\n          minArray: data.map((item) => item.min),\n          allAvgNumber: Math.round(\n            data.reduce((sum, item) => sum + item.avg, 0) / data.length\n          ),\n        };\n        setChartData(transformedData);\n      }\n    } else if (summaryProps?.title === \"Bed Exit Duration Overview Summary\") {\n      const transformedData = filteredDataForBedExitDuration(data);\n      return transformedData;\n    } else if (summaryProps?.title === \"Time to Fall Asleep Overview Summary\") {\n      const transformedData = filteredDataForTimeToFallAsleep(data);\n      return transformedData;\n    } else if (\n      summaryProps?.title === \"Heart Rate Variation Overview Summary\"\n    ) {\n      const transformedData = filteredDataForHeartRateAnnomaly(data);\n      return transformedData;\n    } else if (\n      summaryProps?.title === \"Room Occupancy Duration Overview Summary\"\n    ) {\n      const transformedData = filteredDataForDurationSpentInRoom(data);\n      setChartData(transformedData);\n    }\n    // setChartData(data);\n    return data;\n  }\n  useEffect(() => {\n    async function fetchData() {\n      if (summaryProps?.apisProps?.endpoint) {\n        try {\n          const res = await getSummaryData(summaryProps?.apisProps?.endpoint, {\n            ...summaryProps?.apisProps?.query,\n            elderly_id: elderlyDetails?._id,\n            from_date: fromDate,\n            to_date: toDate,\n          });\n          if (res && res?.data) {\n            setResponseData(prepareChartData(res?.data));\n            prepareLabelData(res?.data);\n            prepareChartData(res?.data);\n          }\n        } catch (error) {\n          console.error(\"Error fetching summary data:\", error);\n          setResponseData([]);\n        }\n      }\n    }\n\n    fetchData();\n  }, [summaryProps?.apisProps?.endpoint, fromDate, toDate]);\n\n  const renderPickers = () => {\n    return summaryProps?.pickerTypes?.map((type) => {\n      switch (type) {\n        case \"weeklyMonthly\":\n          return (\n            <WeeklyMonthlyPicker\n              key=\"weeklyMonthly\"\n              placeholder={\"Weekly/Monthly\"}\n              style={{ width: \"140px\", borderRadius: \"10px\" }}\n              handleChnage={handleWeeklyMonthly}\n              value={\n                selectedPickerType === \"weeklyMonthly\" && toDate && fromDate\n                  ? { start: toDate, end: fromDate }\n                  : null\n              }\n            />\n          );\n        case \"range\":\n          return (\n            <RangePicker\n              key=\"range\"\n              showTime={false}\n              style={{ width: \"200px\", borderRadius: \"10px\" }}\n              size=\"large\"\n              placeholder={[\"Pick Data Range (Start)\", \"End\"]}\n              format=\"YYYY-MM-DD\"\n              onChange={(value, dateString) =>\n                handleDatePicker(value, dateString)\n              }\n              value={\n                selectedPickerType === \"range\" && fromDate && toDate\n                  ? [dayjs(toDate), dayjs(fromDate)]\n                  : null\n              }\n              allowClear={true}\n            />\n          );\n        case \"day\":\n          return (\n            <DatePicker\n              key=\"day\"\n              style={{ width: \"200px\", borderRadius: \"10px\" }}\n              size=\"large\"\n              format=\"YYYY-MM-DD\"\n              onChange={(date, dateString) => handleDayPicker(date, dateString)}\n              value={\n                selectedPickerType === \"day\" && toDate ? dayjs(toDate) : null\n              }\n              allowClear={true}\n            />\n          );\n        default:\n          return null;\n      }\n    });\n  };\n\n  const chartConfig = {\n    multibar: {\n      default: {\n        component: MultiBarChart,\n        getProps: () => ({\n          data: chartData,\n          toDate: fromDate,\n          fromDate: toDate,\n          valueType: summaryProps?.dataType,\n        }),\n      },\n      day: {\n        component: TimelineGraph,\n        getProps: () => ({\n          statisticalData: chartData?.statistical_data,\n          enterBedTime: formatTimeWithSuffix(chartData?.get_bed_idx),\n          getupAfterTime: formatTimeWithSuffix(chartData?.leave_bed_idx),\n        }),\n      },\n    },\n    multibar_sleep_events: {\n      default: {\n        component: MultiBarChart,\n        getProps: () => ({\n          data: chartData,\n          toDate: fromDate,\n          fromDate: toDate,\n          valueType: summaryProps?.dataType,\n        }),\n      },\n      day: {\n        component: TimelineBar,\n        getProps: () => ({\n          alarmEvents: responseData[0]?.events,\n          enterBedTime: transformTime(responseData[0]?.get_bed_idx),\n          getupAfterTime: transformTime(responseData[0]?.leave_bed_idx),\n        }),\n      },\n    },\n    bar: {\n      default: {\n        component: BarChart,\n        getProps: () => ({\n          data: responseData,\n          dataType: summaryProps?.dataType,\n          color: summaryProps?.color,\n          xUnit: summaryProps?.xUnit,\n          toDate: summaryProps?.isFromToDate ? fromDate : \"\",\n          fromDate: summaryProps?.isFromToDate ? toDate : \"\",\n          numberLimit: summaryProps?.numberLimit,\n          dataUnit: summaryProps?.dataUnit,\n          chartFor: summaryProps?.chartFor,\n        }),\n      },\n    },\n    rate: {\n      default: {\n        component: RateChart,\n        getProps: () => ({\n          cheartInfo: chartData,\n          color: summaryProps?.color,\n          dateType: \"Month\",\n          fromDate: toDate,\n          toDate: fromDate,\n        }),\n      },\n      day: {\n        component: DayRateChart,\n        getProps: () => ({\n          data: responseData[0]?.data_list || [],\n          timestamp: responseData[0]?.timestamps || [],\n          color: summaryProps?.color,\n          type: summaryProps?.dataType,\n        }),\n      },\n    },\n    scatter: {\n      default: {\n        component: ScatterChart,\n        getProps: () => ({\n          data:\n            summaryProps?.title !== \"Distribution of bed exit times Summary\"\n              ? transformDataDailyRoutine(responseData)\n              : transformDataForBedExit(responseData),\n          colors: {\n            gotobed: \"#2EC7C9\",\n            wakeup: \"#5AB1EF\",\n            getup: \"#FFB980\",\n            fallasleep: \"#B6A2DE\",\n            bedexit: \"#508C9B\",\n          },\n        }),\n      },\n    },\n  };\n\n  const renderChart = () => {\n    const chartType = summaryProps?.chartType;\n    const chartConfigEntry =\n      chartConfig[chartType]?.[selectedPickerType] ||\n      chartConfig[chartType]?.default;\n\n    if (!chartConfigEntry) return null;\n\n    const { component: ChartComponent, getProps } = chartConfigEntry;\n\n    return (\n      <Suspense fallback={<div>Loading...</div>}>\n        <ChartComponent {...getProps()} />\n      </Suspense>\n    );\n  };\n\n  return (\n    <Modal\n      open={visible}\n      onCancel={onClose}\n      footer={null}\n      width=\"100%\"\n      style={{ height: \"100vh\", padding: 0, borderRadius: 0, top: 0 }}\n      className=\"!rounded-none summaryModal !h-[100vh] overflow-hidden\"\n    >\n      <div className=\"p-4 h-[100vh]\">\n        <div className=\"flex flex-col justify-center items-center mb-4 gap-2\">\n          <h2 className=\"text-2xl font-bold text-primary\">\n            {summaryProps?.title}\n          </h2>\n          <div\n            id=\"DatePickers\"\n            className=\"flex gap-4 items-center justify-center mt-4\"\n          >\n            {renderPickers()}\n          </div>\n        </div>\n        {avgLabels.length > 0 && (\n          <div\n            id=\"chartTotal\"\n            className=\"flex w-full flex-wrap items-center justify-center border-b mt-12\"\n          >\n            {avgLabels.map((item, indx, arr) => (\n              <TotalItem\n                key={indx}\n                label={item.name}\n                value={item.value}\n                isFirst={indx === 0}\n                isLast={indx === arr.length - 1}\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"report-content max-h-[350px]  w-[90%] mt-16 mx-auto\">\n          {renderChart()}\n        </div>\n\n        {/* data table  */}\n        {/* <div className=\"w-[90%] mx-auto mt-6\">\n          <Table dataSource={data} columns={columns} pagination={false} />\n        </div> */}\n      </div>\n    </Modal>\n  );\n}\n\nexport const TotalItem = ({ label, value, isFirst, isLast }) => {\n  return (\n    <div\n      id=\"totalItem\"\n      className={`max-w-[200px] w-fit border p-1 px-6 flex items-center justify-center border-b-[0.5px] flex-col ${\n        isFirst && isLast\n          ? \"rounded-tl-xl rounded-tr-xl\"\n          : isFirst\n          ? \"rounded-tl-xl\"\n          : isLast\n          ? \"rounded-tr-xl\"\n          : \"\"\n      }`}\n    >\n      <h1 className=\"text-2xl font-bold text-primary text-nowrap\">{value}</h1>\n      <span className=\"text-sm font-medium opacity-80 text-primary text-nowrap\">\n        {label}\n      </span>\n    </div>\n  );\n};\n\nexport const columns = [\n  {\n    title: \"Item\",\n    render: (row) => (\n      <div className=\"text-primary px-[11px] text-base font-semibold\">\n        {row.event}\n      </div>\n    ),\n  },\n  {\n    title: \"Target\",\n    render: (row) => (\n      <div className=\"text-primary px-[11px] text-base font-semibold flex items-center gap-1\">\n        <img src={targetIcon} alt=\"target\" />\n        {row.target}x\n      </div>\n    ),\n  },\n  {\n    title: \"Value\",\n    render: (row) => (\n      <div className=\"text-primary px-[11px] text-base font-semibold\">\n        {row.value}x\n      </div>\n    ),\n  },\n  {\n    title: \"Trend\",\n    render: (row) => (\n      <div className=\"w-full h-[10px]  px-[11px] text-base font-semibold flex items-center gap-2\">\n        <img\n          src={row.value - row.target > 0 ? p1 : p0}\n          alt=\"trend\"\n          className=\"w-[16px] h-[16px]\"\n        />\n        {row.value - row.target}x\n      </div>\n    ),\n  },\n  {\n    title: \"Type\",\n    render: (row) => (\n      <div\n        className={`w-full h-[10px] flex items-center gap-2 px-[11px] text-base font-semibold ${\n          row.status === \"1\"\n            ? \"text-yellow-500\"\n            : row.status === \"2\"\n            ? \"text-red-500\"\n            : \"text-blue-500\"\n        } `}\n      >\n        {row.status === \"0\"\n          ? \"Good\"\n          : row.status === \"1\"\n          ? \"Warning\"\n          : \"Critical\"}\n        {row.status === \"0\" && (\n          <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div> // Circle\n        )}\n        {row.status === \"1\" && (\n          <IoMdArrowDropup size={26} className=\"text-yellow-500\" />\n        )}\n        {row.status === \"2\" && (\n          <IoMdArrowDropup size={26} className=\"text-red-500\" />\n        )}\n      </div>\n    ),\n  },\n];\n\nexport const data = [\n  {\n    event: \"Sleep Apnea\",\n    value: \"10\",\n    target: \"7\",\n    status: \"1\",\n  },\n];\n","import { useState } from \"react\";\nimport { FileOutlined } from \"@ant-design/icons\";\nimport { Button } from \"antd\";\nimport { BsMoonStarsFill } from \"react-icons/bs\";\nimport SummaryModal from \"../SummaryModal/SummaryModal\";\n\nexport default function Template({\n  children,\n  title,\n  color,\n  icon,\n  dataAnalysis,\n  isDataAnalysis = true,\n  isSummaryBtn = true,\n  summaryProps,\n  headerClassName,\n}) {\n  const [isSummaryModalOpen, setIsSummaryModalOpen] = useState(false);\n  return (\n    <>\n      <div className=\"flex flex-col gap-6 p-6 bg-white rounded-2xl !w-full h-full \">\n        <div id=\"header\" className=\"flex justify-between items-center w-full\">\n          <h1\n            className={`text-[21px] font-bold text-primary ${headerClassName}`}\n          >\n            {title}\n          </h1>\n          {isSummaryBtn && (\n            <Button\n              onClick={() => setIsSummaryModalOpen(true)}\n              icon={<FileOutlined />}\n              size=\"large\"\n            >\n              Summary\n            </Button>\n          )}\n        </div>\n        <div className=\"h-full\">{children}</div>\n\n        {isDataAnalysis && dataAnalysis !== \"\" && (\n          <div id=\"footer\" className=\"flex gap-3 items-center p-2 px-3\">\n            {/* <div\n            id=\"bar\"\n            style={{ backgroundColor: color }}\n            className=\"w-[3px] h-full rounded-full\"\n          ></div> */}\n            <div\n              id=\"icon\"\n              style={{\n                color: \"white\",\n                fontSize: \"20px\",\n                backgroundColor: color,\n              }}\n              className=\"p-2 rounded-full\"\n            >\n              {icon}\n            </div>\n            <span className=\"text-[15px] capitalize\">{dataAnalysis}</span>\n          </div>\n        )}\n      </div>\n      <SummaryModal\n        visible={isSummaryModalOpen}\n        onClose={() => setIsSummaryModalOpen(false)}\n        summaryProps={{ ...summaryProps, color, icon }}\n      />\n    </>\n  );\n}\n"],"file":"assets/Template-DrheuA7R.js"}