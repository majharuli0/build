{"version":3,"file":"TimelineBar-ZIODYhUn.js","sources":["../../src/Components/GraphAndChart/TimelineBar.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport ReactEcharts from \"echarts-for-react\";\nimport { Empty } from \"antd\";\nimport { SidebarContext } from \"@/Context/CustomContext\";\n\nconst TimelineChart = ({\n  alarmEvents = [],\n  enterBedTime,\n  getupAfterTime,\n  noDataText = \"No data available to show\",\n}) => {\n  const { sleepEventsType, sleepEventsColor } = useContext(SidebarContext);\n\n  const events = useMemo(\n    () =>\n      alarmEvents\n        .map((event) => ({\n          id: `${event.event_type}-${event.ts}`,\n          name: sleepEventsType[event.event_type],\n          startTime: new Date(event.ts),\n          endTime: new Date(event.ts),\n          color: sleepEventsColor[sleepEventsType[event.event_type]],\n        }))\n        .filter((event) => event.name),\n    [alarmEvents, sleepEventsType, sleepEventsColor]\n  );\n\n  const displayedEventKeys = [11, 12, 13, 14, 15];\n\n  const uniqueEventNames = useMemo(\n    () => displayedEventKeys.map((key) => sleepEventsType[key]).filter(Boolean),\n    [sleepEventsType]\n  );\n\n  const [visibleEvents, setVisibleEvents] = useState(() => {\n    return uniqueEventNames.reduce((acc, eventName) => {\n      acc[eventName] = true;\n      return acc;\n    }, {});\n  });\n\n  useEffect(() => {\n    const newEvents = uniqueEventNames.filter(\n      (name) => !(name in visibleEvents)\n    );\n    if (newEvents.length > 0) {\n      setVisibleEvents((prev) => ({\n        ...prev,\n        ...newEvents.reduce((acc, name) => ({ ...acc, [name]: true }), {}),\n      }));\n    }\n  }, [uniqueEventNames, visibleEvents]);\n\n  const toggleEventVisibility = (eventName) => {\n    setVisibleEvents((prev) => ({\n      ...prev,\n      [eventName]: !prev[eventName],\n    }));\n  };\n\n  const filteredEvents = useMemo(\n    () => events.filter((event) => visibleEvents[event.name]),\n    [events, visibleEvents]\n  );\n\n  const minTime = Math.min(...events.map((event) => event.startTime.getTime()));\n  const maxTime = Math.max(...events.map((event) => event.endTime.getTime()));\n\n  const seriesData = useMemo(\n    () =>\n      filteredEvents.map((event, index) => {\n        const isSingleEvent =\n          event.startTime.getTime() === event.endTime.getTime();\n        return {\n          id: index,\n          name: event.name,\n          value: [\n            event.startTime.getTime(),\n            event.endTime.getTime(),\n            isSingleEvent ? 15 : 10,\n          ],\n          itemStyle: {\n            color: event.color,\n          },\n        };\n      }),\n    [filteredEvents]\n  );\n\n  if (events.length === 0) {\n    return <Empty description={noDataText} />;\n  }\n\n  const options = {\n    tooltip: {\n      trigger: \"item\",\n      formatter: (params) => {\n        const event = filteredEvents[params.data.id];\n        const isSingleEvent =\n          event.startTime.getTime() === event.endTime.getTime();\n        const startTimeLocal = new Date(event.startTime).toLocaleString();\n\n        if (isSingleEvent) {\n          return `${event.name}<br/>Date & Time: ${startTimeLocal}`;\n        } else {\n          const endTimeLocal = new Date(event.endTime).toLocaleString();\n          const durationMs = event.endTime - event.startTime;\n          const durationMinutes = Math.floor(durationMs / (1000 * 60));\n          const hours = Math.floor(durationMinutes / 60);\n          const minutes = durationMinutes % 60;\n          const durationStr =\n            hours > 0\n              ? `${hours} hour(s) ${minutes} minute(s)`\n              : `${minutes} minute(s)`;\n          return `<b>${event.name}</b> <br/>Start: ${startTimeLocal}<br/>End: ${endTimeLocal}<br/>Duration: ${durationStr}`;\n        }\n      },\n    },\n    grid: {\n      left: \"5%\",\n      right: \"5%\",\n      bottom: \"15%\",\n      containLabel: false,\n    },\n    xAxis: {\n      type: \"time\",\n      boundaryGap: true,\n      min: minTime,\n      max: maxTime,\n      splitNumber: 5,\n      axisLabel: {\n        formatter: (value) => {\n          const date = new Date(value);\n          return date.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          });\n        },\n        interval: 0,\n        margin: 5,\n      },\n      axisTick: {\n        show: true,\n        alignWithLabel: true,\n      },\n    },\n    yAxis: {\n      show: false,\n    },\n    series: [\n      {\n        name: \"Events\",\n        type: \"custom\",\n        renderItem: (params, api) => {\n          const start = api.coord([api.value(0), 0]);\n          const end = api.coord([api.value(1), 0]);\n          const barHeight = api.size([0, api.value(2)])[1];\n\n          const width = Math.max(end[0] - start[0], 5);\n\n          // Calculate a consistent base Y position\n          const baseY = params.coordSys.height - barHeight;\n\n          // Apply a reduced offset for staggered bars\n          const offset = params.dataIndex % 5;\n          const yOffset = offset * 2; // Adjust as necessary to minimize vertical shifts\n          const yPosition = params.coordSys.height - barHeight + 60;\n\n          return {\n            type: \"rect\",\n            shape: {\n              x: start[0],\n              y: yPosition,\n              width: width,\n              height: barHeight,\n            },\n            style: {\n              fill: api.style().fill,\n              stroke: \"#fff\",\n              lineWidth: 1,\n            },\n          };\n        },\n\n        encode: {\n          x: [0, 1],\n        },\n        data: seriesData,\n      },\n    ],\n    graphic:\n      enterBedTime && getupAfterTime\n        ? [\n            {\n              type: \"text\",\n              left: \"5%\",\n              bottom: \"1%\",\n              style: {\n                text: `Enter Bed ${enterBedTime}`,\n                fontSize: 12,\n              },\n            },\n            {\n              type: \"text\",\n              right: \"5%\",\n              bottom: \"1%\",\n              style: {\n                text: `Getup ${getupAfterTime}`,\n                fontSize: 12,\n              },\n            },\n          ]\n        : [],\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4 w-full\">\n      <div id=\"customLegend\" className=\"w-full\">\n        <div className=\"flex flex-wrap gap-4 items-center justify-center\">\n          {uniqueEventNames.map((eventName) => (\n            <div\n              key={eventName}\n              className=\"flex items-center gap-2 cursor-pointer\"\n              onClick={() => toggleEventVisibility(eventName)}\n            >\n              <div\n                id=\"legendColorShape\"\n                className=\"size-3 rounded-[4px] border-2\"\n                style={{\n                  backgroundColor: visibleEvents[eventName]\n                    ? sleepEventsColor[eventName]\n                    : \"grey\",\n                  borderColor: visibleEvents[eventName]\n                    ? \"transparent\"\n                    : \"#ccc\",\n                }}\n              ></div>\n              <div>{eventName}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <ReactEcharts option={options} style={{ height: 200, width: \"100%\" }} />\n    </div>\n  );\n};\n\nexport default TimelineChart;\n"],"names":["TimelineChart","alarmEvents","enterBedTime","getupAfterTime","noDataText","sleepEventsType","sleepEventsColor","useContext","SidebarContext","events","useMemo","event","displayedEventKeys","uniqueEventNames","key","visibleEvents","setVisibleEvents","useState","acc","eventName","useEffect","newEvents","name","prev","toggleEventVisibility","filteredEvents","minTime","maxTime","seriesData","index","isSingleEvent","jsx","Empty","options","params","startTimeLocal","endTimeLocal","durationMs","durationMinutes","hours","minutes","durationStr","value","api","start","end","barHeight","width","yPosition","jsxs","ReactEcharts"],"mappings":"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"}