{"version":3,"file":"index-DWesaRZg.js","sources":["../../src/Pages/SubscribedUsers/utiles.jsx","../../src/Pages/SubscribedUsers/index.jsx"],"sourcesContent":["import RefundsRequestModal from \"@/Components/RefundsModal/RefundsRequestModal\";\nimport { Tag, Tooltip } from \"antd\";\nimport { useState } from \"react\";\nimport AdminFiled from \"../../Shared/AdminFiled/AdminFiled\";\nimport { FireTwoTone, StopOutlined, SyncOutlined } from \"@ant-design/icons\";\nimport alipay from \"../../assets/icon/payment-method-icons/alipay.svg\";\nimport jcb from \"../../assets/icon/payment-method-icons/jcb.svg\";\nimport gpay from \"../../assets/icon/payment-method-icons/gpay.svg\";\nimport applepay from \"../../assets/icon/payment-method-icons/applepay.svg\";\nimport unionpay from \"../../assets/icon/payment-method-icons/unionpay.svg\";\nimport mastercard from \"../../assets/icon/payment-method-icons/mastercard.svg\";\nimport paypal from \"../../assets/icon/payment-method-icons/paypal.svg\";\nimport visa from \"../../assets/icon/payment-method-icons/visa.svg\";\nimport SubscriptionUserAction from \"../../Components/ActionManu/SubscriptionUserAction\";\nimport { convertUnixToReadableDate, formatCreatedAt } from \"../../utils/helper\";\nimport SubDetails from \"../../Components/ActionManu/SubDetails\";\n\nconst TransactionIdColumn = ({ transactionId }) => {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(transactionId);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds\n  };\n\n  return (\n    <Tooltip title={copied ? \"Copied!\" : \"Click to copy\"}>\n      <span\n        className=\"text-[14px] xl:text-base font-normal text-text-secondary text-nowrap cursor-pointer\"\n        onClick={handleCopy}\n      >\n        {transactionId}\n      </span>\n    </Tooltip>\n  );\n};\nexport const refundRequestColumns = [\n  {\n    title: \"User\",\n    render: (row) => <AdminFiled data={row} />,\n  },\n  {\n    title: \"Subscription ID\",\n    render: (row) => (\n      <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n        sub_45asd452rf45rasd\n      </span>\n    ),\n  },\n  {\n    title: \"Subscription Plan\",\n    render: (row) => (\n      <button>\n        <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n          <FireTwoTone /> AI Monitoring\n        </span>\n      </button>\n    ),\n  },\n  {\n    title: \"Recurring Money\",\n    render: (row) => (\n      <button>\n        <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n          $ 69 USD\n        </span>\n      </button>\n    ),\n  },\n\n  {\n    title: \"Subscription Expire Date\",\n    render: (row) => (\n      <button>\n        <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n          1 July, 2026\n        </span>\n      </button>\n    ),\n  },\n  {\n    title: \"Subscription Status\",\n    render: (row) => {\n      const isActive = Math.random() < 0.5; // 50% chance\n      return (\n        <button>\n          <span className=\"text-[14px] xl:text-base font-normal text-text-secondary\">\n            {isActive ? (\n              <Tag\n                icon={<SyncOutlined spin />}\n                color=\"success\"\n                className=\"font-semibold\"\n              >\n                Active\n              </Tag>\n            ) : (\n              <Tag icon={<StopOutlined />} className=\"font-semibold\">\n                Canceled\n              </Tag>\n            )}\n          </span>\n        </button>\n      );\n    },\n  },\n  {\n    title: \"Default Payment Method\",\n    render: (row) => {\n      const isActive = Math.random() < 0.5; // 50% chance\n      return (\n        <button>\n          <span className=\"text-[14px] xl:text-base font-normal text-text-secondary flex items-center gap-1\">\n            <img src={visa} alt=\"\" /> **** 3456\n          </span>\n        </button>\n      );\n    },\n  },\n\n  {\n    title: \"Action\",\n    render: (row) => {\n      return (\n        <button>\n          <SubscriptionUserAction />\n        </button>\n      );\n    },\n  },\n];\nexport const subcriptionColumns = [\n  {\n    title: \"Subscription Created At\",\n    render: (row) => (\n      <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n        {formatCreatedAt(row?.created_at) || \"N/A\"}\n      </span>\n    ),\n  },\n  {\n    title: \"User \",\n    render: (row) => (\n      <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n        {row?.StripeEventData?.metadata?.user_email || \"N/A\"}\n      </span>\n    ),\n  },\n  {\n    title: \"Subscription ID\",\n    render: (row) => (\n      <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n        {row?.StripeEventData?.id || \"N/A\"}\n      </span>\n    ),\n  },\n\n  {\n    title: \"Product ID\",\n    render: (row) => (\n      <button>\n        <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n          {row?.StripeEventData?.plan?.product || \"N/A\"}\n        </span>\n      </button>\n    ),\n  },\n  {\n    title: \"Amount\",\n    render: (row) => (\n      <button>\n        <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap uppercase\">\n          ${row?.real_amount_decimal / 100 || 0} {row?.currency || \"USD\"}\n        </span>\n      </button>\n    ),\n  },\n\n  {\n    title: \"Subscription Expire Date\",\n    render: (row) => (\n      <button>\n        <span className=\" text-[14px] xl:text-base  font-normal text-text-secondary text-nowrap\">\n          {convertUnixToReadableDate(\n            row?.StripeEventData?.current_period_end\n          ) || \"N/A\"}\n        </span>\n      </button>\n    ),\n  },\n  {\n    title: \"Subscription Status\",\n    render: (row) => {\n      const isActive = Math.random() < 0.5; // 50% chance\n      return (\n        <button>\n          <span className=\"text-[14px] xl:text-base font-normal text-text-secondary\">\n            {/* {isActive ? (\n              <Tag\n                icon={<SyncOutlined spin />}\n                color=\"success\"\n                className=\"font-semibold\"\n              >\n                Active\n              </Tag>\n            ) : (\n              <Tag icon={<StopOutlined />} className=\"font-semibold\">\n                Canceled\n              </Tag>\n            )} */}\n            {row?.StripeEventData?.status === \"canceled\" && (\n              <Tag icon={<StopOutlined />} className=\"font-semibold\">\n                Canceled\n              </Tag>\n            )}\n            {row?.StripeEventData?.status === \"active\" && (\n              <Tag\n                icon={<SyncOutlined spin />}\n                color=\"success\"\n                className=\"font-semibold\"\n              >\n                Active\n              </Tag>\n            )}\n            {row?.StripeEventData?.status === \"trialing\" && (\n              <Tag\n                icon={<SyncOutlined spin />}\n                color=\"warning\"\n                className=\"font-semibold\"\n              >\n                Trialing\n              </Tag>\n            )}\n          </span>\n        </button>\n      );\n    },\n  },\n  {\n    title: \"Details\",\n    render: (row) => {\n      const isActive = Math.random() < 0.5;\n      return (\n        <button>\n          <span className=\"text-[14px] xl:text-base font-normal text-text-secondary flex items-center gap-1\">\n            <SubDetails data={row} />\n          </span>\n        </button>\n      );\n    },\n  },\n];\n","import { useCallback, useEffect, useState } from \"react\";\nimport { refundRequestColumns, subcriptionColumns } from \"./utiles\";\nimport CustomTable from \"@/Shared/Table/CustomTable\";\nimport { SidebarContext } from \"@/Context/CustomUsertable\";\nimport { getOrders } from \"@/api/ordersManage\";\nimport { fetchUsers } from \"../../redux/features/users/usersSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Input, Select } from \"antd\";\nimport { FiSearch } from \"react-icons/fi\";\nimport { getSubscriptions } from \"../../api/subscriptions\";\n\nexport default function SubscribedUsers() {\n  const [loading, setLoading] = useState(true);\n  const [page, SetPage] = useState({});\n  const [total, setTotal] = useState(0);\n  const [subscribedUsers, setSubscribedUsers] = useState([]);\n  const getSubscriptionsList = useCallback(() => {\n    setLoading(true);\n    getSubscriptions(page)\n      .then((res) => {\n        setSubscribedUsers(res?.data);\n        setTotal(res?.total);\n      })\n      .then((err) => {\n        console.error(\"Error fetching subscriptions:\", err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [page]);\n  useEffect(() => {\n    getSubscriptionsList();\n  }, [getSubscriptionsList]);\n  return (\n    <>\n      <div\n        id=\"refunds_request\"\n        className=\"w-full flex flex-col gap-4 justify-center items-center bg-white rounded-2xl p-6 mt-6\"\n      >\n        <div\n          id=\"Recently_Closed_Alerts_Header\"\n          className=\"w-full flex justify-between\"\n        >\n          <h2 className=\" text-2xl font-bold text-text-primary\">\n            All Subscribed User\n          </h2>\n          {/* \n          <Input\n            size=\"large\"\n            placeholder=\"Customer name, email...\"\n            prefix={<FiSearch className=\"text-gray-400\" />}\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            className=\" pr-20 border border-gray-300 max-w-[300px]\"\n            style={{ boxShadow: \"none\" }}\n          />\n          <Select\n            defaultValue=\"All\"\n            style={{ width: 150 }}\n            size=\"large\"\n            onChange={handleChange}\n            options={[\n              { value: \"All\", label: \"All Status\" },\n              { value: \"Active\", label: \"Active\" },\n              { value: \"Canceled\", label: \"Canceled\" },\n            ]}\n          /> */}\n        </div>\n        <SidebarContext.Provider\n          value={{\n            total: total,\n            page,\n            SetPage,\n            getList: getSubscriptionsList,\n          }}\n        >\n          <CustomTable\n            loading={loading}\n            columns={subcriptionColumns}\n            tableData={subscribedUsers}\n            showPagination={false}\n          />\n        </SidebarContext.Provider>\n      </div>\n    </>\n  );\n}\n"],"names":["subcriptionColumns","row","jsx","formatCreatedAt","_b","_a","jsxs","convertUnixToReadableDate","Tag","StopOutlined","SyncOutlined","_c","SubDetails","SubscribedUsers","loading","setLoading","useState","page","SetPage","total","setTotal","subscribedUsers","setSubscribedUsers","getSubscriptionsList","useCallback","getSubscriptions","res","err","useEffect","Fragment","SidebarContext","CustomTable"],"mappings":"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"}