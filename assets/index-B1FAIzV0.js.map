{"version":3,"file":"index-B1FAIzV0.js","sources":["../../src/Components/TimeSelection/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\r\nimport dayjs from \"dayjs\";\r\nimport isoWeek from \"dayjs/plugin/isoWeek\";\r\nimport weekOfYear from \"dayjs/plugin/weekOfYear\";\r\n\r\ndayjs.extend(isoWeek);\r\ndayjs.extend(weekOfYear);\r\n\r\nconst TimeSelection = (props) => {\r\n  const { handleClick = () => {}, name, setLoading } = props;\r\n  const [date, setDate] = useState({\r\n    text: \"Today\",\r\n    value: dayjs(),\r\n    endvalue: \"\",\r\n  });\r\n  const isMounted = useRef(true);\r\n\r\n  const handleLeftClick = () => {\r\n    if (name == \"Day\" || name == \"Daily\") {\r\n      const newDate = date.value.subtract(1, \"day\");\r\n      if (newDate.isBefore(dayjs(), \"day\")) {\r\n        setDate({\r\n          text: newDate.isSame(dayjs(), \"day\")\r\n            ? \"Today\"\r\n            : newDate.isSame(dayjs().subtract(1, \"day\"), \"day\")\r\n            ? \"Yesterday\"\r\n            : newDate.format(\"YYYY-MM-DD\"),\r\n          value: newDate,\r\n        });\r\n      }\r\n    } else if (name == \"Week\") {\r\n      let start = date.value.subtract(1, \"week\");\r\n      let end = date.endvalue.subtract(1, \"week\");\r\n\r\n      setDate({\r\n        value: start,\r\n        endvalue: end,\r\n        text: `Week ${start.week()}`,\r\n      });\r\n    } else {\r\n      let startOfMonth = date.value.subtract(1, \"month\");\r\n      let endOfMonth = date.endvalue.subtract(1, \"month\");\r\n      startOfMonth = dayjs(startOfMonth).startOf(\"month\");\r\n      endOfMonth = dayjs(endOfMonth).endOf(\"month\");\r\n      console.log(\"startOfMonth.month()\", startOfMonth.month());\r\n      setDate({\r\n        value: startOfMonth,\r\n        endvalue: endOfMonth,\r\n        text: `Month ${startOfMonth.month() + 1}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRightClick = () => {\r\n    if (name == \"Day\" || name == \"Daily\") {\r\n      let newDate = date.value;\r\n      if (newDate.isBefore(dayjs(), \"day\")) {\r\n        newDate = date.value.add(1, \"day\");\r\n        setDate({\r\n          text: newDate.isSame(dayjs(), \"day\")\r\n            ? \"Today\"\r\n            : newDate.isSame(dayjs().subtract(1, \"day\"), \"day\")\r\n            ? \"Yesterday\"\r\n            : newDate.format(\"YYYY-MM-DD\"),\r\n          value: newDate,\r\n        });\r\n      }\r\n    } else if (name == \"Week\") {\r\n      const nextWeekStart = date.value.add(1, \"week\");\r\n      const nextWeekEnd = date.endvalue.add(1, \"week\");\r\n      // 不允许超过本周\r\n      if (nextWeekStart.isAfter(dayjs().startOf(\"isoWeek\"))) {\r\n        return;\r\n      }\r\n      let str = `Week ${nextWeekStart.week()}`;\r\n\r\n      setDate({\r\n        value: nextWeekStart,\r\n        endvalue: nextWeekEnd,\r\n        text: str,\r\n      });\r\n      return;\r\n    } else {\r\n      let startOfMonth = date.value.add(1, \"month\");\r\n      let endOfMonth = date.endvalue.add(1, \"month\");\r\n      startOfMonth = dayjs(startOfMonth).startOf(\"month\");\r\n      endOfMonth = dayjs(endOfMonth).endOf(\"month\");\r\n\r\n      if (endOfMonth.isAfter(dayjs(), \"month\")) {\r\n        return;\r\n      }\r\n\r\n      setDate({\r\n        value: startOfMonth,\r\n        endvalue: endOfMonth,\r\n        text: `Month ${startOfMonth.month() + 1}`,\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isMounted.current) {\r\n      isMounted.current = false;\r\n      return;\r\n    }\r\n\r\n    handleClick(date);\r\n  }, [date]);\r\n  useEffect(() => {\r\n    if (name == \"Day\" || name == \"Daily\") {\r\n      setDate({\r\n        value: dayjs(),\r\n        endvalue: \"\",\r\n        text: `Today`,\r\n      });\r\n    } else if (name == \"Week\") {\r\n      let start = dayjs().startOf(\"isoWeek\");\r\n\r\n      setDate({\r\n        value: start,\r\n        endvalue: dayjs().endOf(\"isoWeek\"),\r\n        text: `Week ${start.week()}`,\r\n      });\r\n    } else {\r\n      const startOfMonth = dayjs().startOf(\"month\");\r\n      const endOfMonth = dayjs().endOf(\"month\");\r\n      setDate({\r\n        value: startOfMonth,\r\n        endvalue: endOfMonth,\r\n        text: `Month ${startOfMonth.month() + 1}`,\r\n      });\r\n    }\r\n  }, [name]);\r\n\r\n  return (\r\n    <div className=\"flex w-[200px] justify-between items-center\">\r\n      <div\r\n        className=\"w-[32px] h-[32px] bg-OnButtonNormal rounded-[100px] flex items-center justify-center mr-[5px] \"\r\n        onClick={handleLeftClick}\r\n      >\r\n        {\" \"}\r\n        <LeftOutlined className=\"text-white\" />\r\n      </div>\r\n      <div className=\" text-[16px] text-cblock font-semibold\">{date.text}</div>\r\n      <div\r\n        className=\"w-[32px] h-[32px] bg-OnButtonNormal rounded-[100px] flex items-center justify-center \"\r\n        onClick={handleRightClick}\r\n      >\r\n        {\" \"}\r\n        <RightOutlined className=\"text-white\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeSelection;\r\n"],"names":["dayjs","isoWeek","weekOfYear"],"mappings":"iYAMAA,EAAM,OAAOC,CAAO,EACpBD,EAAM,OAAOE,CAAU"}