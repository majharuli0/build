{"version":3,"file":"AlertsHistoryTab-XdbIV3lg.js","sources":["../../src/Pages/Elderlies/Components/TabContents/Alerts/utiles.jsx","../../src/Pages/Elderlies/Components/TabContents/Alerts/AlertsHistoryTab.jsx"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport AlertName from \"@/Components/NameCol/AlertName\";\nimport { LuEye } from \"react-icons/lu\";\nimport { Table } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport ActionManu from \"@/Components/ActionManu/ActionManu\";\nimport LargeTextViewerModal from \"@/Components/LargeTextViewerModal/LargeTextViewerModal\";\nimport {\n  transformDateAndTime,\n  transformDateAndTimeToDuration,\n  getAlertType,\n  calculateDurationBetweenTimes,\n} from \"@/utils/helper\";\nimport { SidebarContext } from \"@/Context/CustomContext\";\nimport AutoUpdatingDuration from \"@/Components/AutoUpdatingDuration/AutoUpdatingDuration\";\nimport InlineActionManu from \"../../../../../Components/ActionManu/InlineActionManu\";\n\nexport default function useAlertTableColumns(type) {\n  const { rolesFormatter } = useContext(SidebarContext);\n  const navigate = useNavigate(); // Initialize the navigate function\n  const handleViewClick = (row) => {\n    window.scrollTo(0, 0);\n    navigate(\n      `/supporter/elderlies/elderly-profile/${row.elderly_id}?tab=overview`\n    );\n  };\n  const alertColsMapping = {\n    activeAlertsTableData: [\n      \"alertName\",\n      \"alertType\",\n      \"elderlyName\",\n      \"roomName\",\n      \"incidentTime\",\n      \"alertLife\",\n      \"address\",\n      \"viewElderly\",\n    ],\n    recentlyClosedAlertsTableData: [\n      \"alertName\",\n      \"incidentTime\",\n      \"alertLifetime\",\n      \"alertStatus\",\n      \"closedAt\",\n      \"closedBy\",\n      \"largeText\",\n      \"action2\",\n    ],\n    eventsTableData: [\n      \"eventName\",\n      \"elderlyName\",\n      \"eventTime\",\n      \"eventTimeline\",\n      \"hospital\",\n      \"expandColumn\",\n      \"largeText\",\n      \"disabilityType\",\n      \"action\",\n    ],\n  };\n  const AlertsTableColumns = {\n    alertName: {\n      title: \"Title\",\n      render: (row) => <AlertName data={row} />,\n    },\n    alertType: {\n      title: \"Type\",\n      render: (row) => <span>{getAlertType(row)}</span>,\n    },\n    elderlyName: {\n      title: \"User Name\",\n      dataIndex: \"elderly_name\",\n      render: (text) => <span>{text}</span>,\n    },\n    roomName: {\n      title: \"Room Name\",\n      dataIndex: \"room_name\",\n      render: (text) => <span>{text}</span>,\n    },\n\n    incidentTime: {\n      title: \"Observation Time\",\n      dataIndex: \"created_at\",\n      render: (text) => (\n        <span className=\"text-nowrap\">{transformDateAndTime(text)}</span>\n      ),\n    },\n    alertLifetime: {\n      title: \"Duration\",\n      render: (row) =>\n        row?.closed_at ? (\n          <span className=\"text-nowrap\">\n            {calculateDurationBetweenTimes(row?.created_at, row?.closed_at)}\n          </span>\n        ) : (\n          <AutoUpdatingDuration date={row?.created_at} />\n        ),\n    },\n    alertLife: {\n      title: \"Duration\",\n      dataIndex: \"created_at\",\n      render: (text) => (\n        <span className=\"text-nowrap\">\n          {/* {transformDateAndTimeToDuration(text)} */}\n          <AutoUpdatingDuration date={text} />\n        </span>\n      ),\n    },\n    alertStatus: {\n      title: \"Status\",\n      // dataIndex: \"status\",\n      render: (row) =>\n        row?.closed_at ? (\n          <span className=\"text-nowrap\">\n            {row?.status == 0 ? \"True Notification\" : \"False Notification\"}\n          </span>\n        ) : (\n          <>N/A</>\n        ),\n    },\n    address: {\n      title: \"Address\",\n      width: \"230px\",\n      render: (row) => (\n        <span className=\"!w-[230px] text-nowrap\">{row.address}</span>\n      ),\n    },\n    //for recently closed alerts table\n    closedAt: {\n      title: \"Closed At\",\n      render: (row) =>\n        row?.closed_at ? (\n          <span className=\"text-nowrap\">\n            {transformDateAndTime(row?.closed_at)}\n          </span>\n        ) : (\n          <>N/A</>\n        ),\n    },\n    closedBy: {\n      title: \"Closed By\",\n      render: (row) =>\n        row?.closed_at ? (\n          <span className=\"text-nowrap\">\n            {row.closed_by} ({rolesFormatter[row.closed_by_role]} )\n          </span>\n        ) : (\n          <>N/A</>\n        ),\n    },\n    //for events table\n    eventName: {\n      title: \"Event Name\",\n      dataIndex: \"eventName\",\n      render: (text) => <span>{text}</span>,\n    },\n    eventTime: {\n      title: \"Event Time\",\n      dataIndex: \"time\",\n      render: (text) => <span className=\"text-nowrap\">{text}</span>,\n    },\n    eventTimeline: {\n      title: \"Event Timeline\",\n      dataIndex: \"alertLifetime\",\n      render: (text) => <span className=\"text-nowrap\">{text}</span>,\n    },\n    disabilityType: {\n      title: \"Disability Type\",\n      dataIndex: \"disabilityType\",\n      render: (text) => <span className=\"text-nowrap\">{text}</span>,\n    },\n    hospital: {\n      title: \"Hospital\",\n      dataIndex: \"hospital\",\n      render: (row) => (\n        <span className=\"text-nowrap\">\n          {row.name.length > 20 ? `${row.name.substring(0, 20)}...` : row.name}\n        </span>\n      ),\n    },\n    largeText: {\n      title: () => {\n        switch (type) {\n          case \"events\":\n            return \"Additional Info\";\n          case \"recentlyClosedAlert\":\n            return \"Comments\";\n          default:\n            return \"\";\n        }\n      },\n      render: (row) =>\n        row?.closed_at ? (\n          <LargeTextViewerModal\n            data={\n              type === \"recentlyClosedAlert\"\n                ? row?.comment\n                : type === \"events\"\n                ? row?.additionalInfo\n                : \"\"\n            }\n            title={\n              type === \"recentlyClosedAlert\"\n                ? \"Comment\"\n                : type === \"events\"\n                ? \"Additional Info\"\n                : \"\"\n            }\n          />\n        ) : (\n          \"N/A\"\n        ),\n    },\n    expandColumn: Table.EXPAND_COLUMN,\n    viewElderly: {\n      // title: \"View Elderly\",\n      render: (row) => (\n        <span\n          onClick={() => handleViewClick(row)}\n          className=\"flex items-center transition-all duration-300 justify-center gap-2 text-sm font-medium text-text-primary hover:text-primary cursor-pointer p-2 rounded-md  text-center hover:bg-slate-100\"\n        >\n          View <LuEye />\n        </span>\n      ),\n    },\n    action: {\n      title: \"Action\",\n      render: (row) => <ActionManu row={row} />,\n    },\n    action2: {\n      align: \"right\",\n      render: (row) => <InlineActionManu row={row} onlyFall={true} />,\n    },\n  };\n  const [alertTableColumns, setAlertTableColumns] = useState(undefined);\n  useEffect(() => {\n    if (type == \"activeAlert\") {\n      const cols = alertColsMapping.activeAlertsTableData.map((col) => {\n        return AlertsTableColumns[col];\n      });\n      setAlertTableColumns(cols);\n    } else if (type == \"recentlyClosedAlert\") {\n      const cols = alertColsMapping.recentlyClosedAlertsTableData.map((col) => {\n        return AlertsTableColumns[col];\n      });\n      setAlertTableColumns(cols);\n    } else if (type == \"events\") {\n      const cols = alertColsMapping.eventsTableData.map((col) => {\n        return AlertsTableColumns[col];\n      });\n      setAlertTableColumns(cols);\n    } else {\n      setAlertTableColumns([]);\n    }\n  }, []);\n  return alertTableColumns;\n}\n\nexport { useAlertTableColumns };\n","import React, { useEffect, useState, useCallback, useContext } from \"react\";\nimport { getAlertList } from \"@/api/elderlySupport\";\nimport dayjs, { Dayjs } from \"dayjs\";\nimport { SidebarContext } from \"@/Context/CustomUsertable\";\nimport {\n  Segmented,\n  ConfigProvider,\n  Select,\n  Checkbox,\n  Button,\n  Table,\n} from \"antd\";\n// import { alertHistoryColumns } from \"./utiles\";\nimport { useAlertTableColumns } from \"./utiles\";\nimport { getAlertInfoViaEventDetails, getAlertsGroup } from \"@/utils/helper\";\nimport { CustomContext } from \"@/Context/UseCustomContext\";\nimport AlertCloseModal from \"@/Components/ActiveAlerts/AlertCloseModal\";\n\nexport default function AlertsHistoryTab() {\n  const [search, setSearch] = useState(\"\");\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [openAlertCloseModal, setOpenAlertCloseModal] = useState(false);\n  const recentlyClosedAlertTableColumns = useAlertTableColumns(\n    \"recentlyClosedAlert\"\n  );\n  const { elderlyDetails } = useContext(CustomContext);\n\n  const [alertHistory, setAlertHistory] = useState([]);\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10); // Add pageSize state\n  const [total, setTotal] = useState(0);\n  const [alertHistiryQuery, setAlertHistiryQuery] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isResolved, setIsResolved] = useState(null);\n\n  const getAlartsHistory = useCallback(() => {\n    setLoading(true);\n    getAlertList({\n      to_date: \"2024-11-30\",\n      from_date: dayjs().format(\"YYYY-MM-DD\"),\n      is_resolved: isResolved,\n      elderly_id: elderlyDetails?._id,\n      page: page, // Fix: pass page correctly\n      limit: pageSize, // Fix: add limit parameter\n      ...alertHistiryQuery,\n    })\n      .then((res) => {\n        setTotal(res.total);\n        setLoading(false);\n        setAlertHistory(res.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n      });\n  }, [page, pageSize, alertHistiryQuery, isResolved, elderlyDetails?._id]); // Add pageSize to dependencies\n\n  useEffect(() => {\n    getAlartsHistory();\n  }, [getAlartsHistory]);\n\n  function onAlertHistorySegmantChnage(value) {\n    setAlertHistiryQuery(getAlertsGroup(value));\n    setPage(1); // Reset to first page when filter changes\n  }\n\n  // Handle pagination change\n  const handleTableChange = (pagination) => {\n    setPage(pagination.current);\n    setPageSize(pagination.pageSize);\n  };\n\n  // Determine if an alert is Critical or Warning based on event type\n  const getAlertSeverity = (item) => {\n    return getAlertInfoViaEventDetails(item).label;\n  };\n\n  // Check if item should be selectable (checkbox enabled)\n  const isItemSelectable = (item) => {\n    const severity = getAlertSeverity(item);\n    // Enable checkbox only for Critical and Warning items that are not resolved\n    return (\n      (severity === \"Critical\" || severity === \"Warning\") &&\n      item.is_resolved === false\n    );\n  };\n\n  // Handle checkbox selection\n  const handleCheckboxChange = (itemId, checked) => {\n    if (checked) {\n      setSelectedItems((prev) => [...prev, itemId]);\n    } else {\n      setSelectedItems((prev) => prev.filter((id) => id !== itemId));\n    }\n  };\n\n  // Handle select all checkboxes\n  const handleSelectAll = (checked) => {\n    if (checked) {\n      const selectableItems = alertHistory\n        .filter((item) => isItemSelectable(item))\n        .map((item) => item._id || item.id);\n      setSelectedItems(selectableItems);\n    } else {\n      setSelectedItems([]);\n    }\n  };\n\n  // Get selectable items count\n  const selectableItemsCount = alertHistory.filter(isItemSelectable).length;\n\n  // Handle bulk action\n  const handleBulkAction = () => {\n    // Add your bulk action logic here\n    setOpenAlertCloseModal(true);\n    // You can add API calls or other actions here\n  };\n\n  // Row selection configuration for Ant Design Table\n  const rowSelection = {\n    selectedRowKeys: selectedItems,\n    onChange: (selectedKeys) => setSelectedItems(selectedKeys),\n    getCheckboxProps: (record) => ({\n      // Disable checkbox for items that are NOT Critical/Warning OR are resolved\n      disabled: !isItemSelectable(record),\n    }),\n  };\n\n  // Handle filter changes that should reset pagination\n  const handleFilterChange = (filterValue) => {\n    setIsResolved(filterValue);\n    setPage(1); // Reset to first page when filter changes\n  };\n\n  return (\n    <div\n      id=\"Elderlies\"\n      className=\"w-full flex flex-col gap-4 justify-center items-center bg-white rounded-2xl p-6 mt-6\"\n    >\n      <div id=\"Elderlies_Header\" className=\"w-full flex justify-between\">\n        <h1 className=\"text-[24px] font-bold\">Activities History</h1>\n        <div className=\"flex gap-4 h-fit items-center\">\n          {selectedItems.length > 0 && (\n            <Button\n              type=\"primary\"\n              onClick={handleBulkAction}\n              style={{\n                backgroundColor: \"#252F67\",\n                borderColor: \"#252F67\",\n              }}\n            >\n              Resolve ({selectedItems.length})\n            </Button>\n          )}\n\n          <ConfigProvider\n            theme={\n              {\n                // components: {\n                //   Segmented: {\n                //     itemSelectedBg: \"#252F67\",\n                //     itemSelectedColor: \"#fff\",\n                //     fontFamily: \"Baloo2\",\n                //   },\n                // },\n              }\n            }\n          >\n            <Segmented\n              size=\"large\"\n              options={alertHistorySegmentOptions}\n              onChange={(value) => onAlertHistorySegmantChnage(value)}\n            />\n          </ConfigProvider>\n\n          <ConfigProvider\n            theme={{\n              token: {\n                colorPrimary: \"#8086AC\",\n              },\n            }}\n          >\n            <Select\n              size=\"large\"\n              style={{\n                width: \"120px\",\n                height: \"40px\",\n                borderRadius: \"10px !important\",\n              }}\n              onChange={(selectedValue, option) => {\n                handleFilterChange(selectedValue); // Use the new handler\n              }}\n              placeholder=\"Filter by Alert Status\"\n              value={isResolved}\n              options={[\n                {\n                  label: \"All Activity\",\n                  value: null,\n                },\n                {\n                  label: \"Resolved\",\n                  value: true,\n                },\n                {\n                  label: \"Non-Resolved\",\n                  value: false,\n                },\n              ]}\n            />\n          </ConfigProvider>\n        </div>\n      </div>\n\n      <SidebarContext.Provider\n        value={{\n          getLatestAlarmList: {\n            getAlartsHistory,\n          },\n        }}\n      >\n        <ConfigProvider\n          theme={{\n            Table: {\n              rowSelectedHoverBg: \"#fff\",\n              rowSelectedBg: \"#ba80f0\",\n            },\n          }}\n        >\n          <Table\n            rowSelection={rowSelection}\n            columns={\n              Array.isArray(recentlyClosedAlertTableColumns)\n                ? recentlyClosedAlertTableColumns\n                : []\n            }\n            dataSource={alertHistory}\n            rowKey=\"_id\"\n            loading={loading}\n            pagination={{\n              current: page,\n              pageSize: pageSize,\n              total: total,\n              showSizeChanger: true,\n              showQuickJumper: true,\n              showTotal: (total, range) =>\n                `${range[0]}-${range[1]} of ${total} items`,\n              pageSizeOptions: [\"10\", \"20\", \"50\", \"100\"],\n            }}\n            onChange={handleTableChange} // Add onChange handler\n            locale={{ emptyText: \"No recent alerts\" }}\n            className=\"rounded-lg w-full\"\n            scroll={{ x: 700 }}\n          />\n        </ConfigProvider>\n      </SidebarContext.Provider>\n      <AlertCloseModal\n        openAlertCloseModal={openAlertCloseModal}\n        setOpenAlertCloseModal={setOpenAlertCloseModal}\n        selectedAlert={selectedItems}\n        getAlertListDatas={() => {\n          getAlartsHistory();\n          setSelectedItems([]);\n        }}\n      />\n    </div>\n  );\n}\n\nexport const alertHistorySegmentOptions = [\n  {\n    label: \"All Activity\",\n    value: \"All Activity\",\n  },\n  {\n    label: \"Critical\",\n    value: \"Critical\",\n  },\n  {\n    label: \"Warning\",\n    value: \"Warning\",\n  },\n  {\n    label: \"Informational\",\n    value: \"Info\",\n  },\n];\n"],"names":["useAlertTableColumns","type","rolesFormatter","useContext","SidebarContext","navigate","useNavigate","handleViewClick","row","alertColsMapping","AlertsTableColumns","jsx","AlertName","getAlertType","text","transformDateAndTime","calculateDurationBetweenTimes","AutoUpdatingDuration","jsxs","LargeTextViewerModal","Table","LuEye","ActionManu","InlineActionManu","alertTableColumns","setAlertTableColumns","useState","useEffect","cols","col","AlertsHistoryTab","search","setSearch","selectedItems","setSelectedItems","openAlertCloseModal","setOpenAlertCloseModal","recentlyClosedAlertTableColumns","elderlyDetails","CustomContext","alertHistory","setAlertHistory","page","setPage","pageSize","setPageSize","total","setTotal","alertHistiryQuery","setAlertHistiryQuery","loading","setLoading","isResolved","setIsResolved","getAlartsHistory","useCallback","getAlertList","dayjs","res","err","onAlertHistorySegmantChnage","value","getAlertsGroup","handleTableChange","pagination","getAlertSeverity","item","getAlertInfoViaEventDetails","isItemSelectable","severity","handleBulkAction","rowSelection","selectedKeys","record","handleFilterChange","filterValue","Button","ConfigProvider","Segmented","alertHistorySegmentOptions","Select","selectedValue","option","range","AlertCloseModal"],"mappings":"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"}