import{r as O,j as k,b1 as N,E as T,e as P,A as V}from"./index-KVzv27Nj.js";try{let u=typeof window<"u"?window:typeof global<"u"?global:typeof globalThis<"u"?globalThis:typeof self<"u"?self:{},b=new u.Error().stack;b&&(u._sentryDebugIds=u._sentryDebugIds||{},u._sentryDebugIds[b]="da0d53f5-489a-4456-be03-3c96f168f6d8",u._sentryDebugIdIdentifier="sentry-dbid-da0d53f5-489a-4456-be03-3c96f168f6d8")}catch{}function L({data:u,dataType:b,color:m,chartType:S="Day",toDate:_,fromDate:v,xUnit:p="date",hourLimit:w=12,numberLimit:I=100,dataUnit:B="",chartFor:f=""}){const $=O.useMemo(()=>{if(!(u!=null&&u.length))return null;function z(t){const s=Array.from({length:67},(n,i)=>{const y=60+i*10,d=Math.floor(y/60),h=y%60;return h===0?`${d} hr`:`${d} hr ${h} min`}),a=new Array(s.length).fill(0);t==null||t.forEach(n=>{const i=Math.floor((n.sleep_total_time-60)/10);i>=0&&i<a.length&&a[i]++});const l=a.reduce((n,i)=>n+i,0),c=a.map(n=>l>0?(n/l*100).toFixed(0):"0");return{xaxis:s,data:c}}function E(t){const s=Array.from({length:10},(n,i)=>`${0+i*10}-${0+(i+1)*10}`),a=new Array(s.length).fill(0);t==null||t.forEach(n=>{const i=Math.floor(f!=="deepSleepPercentageDistribution"?(n==null?void 0:n.sleep_efficiency)/10:(n==null?void 0:n.sleep_quality)/10);i>=0&&i<a.length&&a[i]++});const l=t.length,c=a.map(n=>l>0?(n/l*100).toFixed(0):"0");return V.set(f,{xaxis:s,data:c}),{xaxis:s,data:c}}function M(t){const e=Array.from({length:6},(c,n)=>`${n*5}-${(n+1)*5}`),s=new Array(e.length).fill(0);t==null||t.forEach(c=>{const n=parseFloat(c.ahi),i=Math.floor(n/5);i>=0&&i<s.length&&s[i]++});const a=t.length,l=s.map(c=>a>0?(c/a*100).toFixed(0):"0");return{xaxis:e,data:l}}function R(t){const e=Array.from({length:12},(c,n)=>`${n*10}-${(n+1)*10}`),s=new Array(e.length).fill(0);t==null||t.forEach(c=>{const n=c.totalFallAsleepDuration,i=Math.floor(n/10);i>=0&&i<s.length&&s[i]++});const a=t.length,l=s.map(c=>a>0?(c/a*100).toFixed(0):"0");return{xaxis:e,data:l}}function C(t){const r={xaxis:Array.from({length:31},(n,i)=>i+6).map(n=>n.toString()),data:Array(31).fill(0)};let e=Array(31).fill(0);t.forEach(n=>{const i=n.data_list.filter(d=>d!=="-1"&&d!=="0").map(Number);let y=Array(31).fill(0);i.forEach(d=>{if(d>=6&&d<=36){const h=d-6;y[h]++}}),y.forEach((d,h)=>{e[h]+=d})});const s=e.map((n,i)=>n>0?i:null).filter(n=>n!==null);if(s.length===0)return r;const a=Math.max(s[0]-1,0),l=Math.min(s[s.length-1]+1,30),c=e.slice(a,l+1).reduce((n,i)=>n+i,0);return r.data=e.map((n,i)=>i>=a&&i<=l&&c>0?(n/c*100).toFixed(2):"0.00"),r}const x=["45-50","50-55","55-60","60-65","65-70","70-75","75-80","80-85","85-90","90-95","95-100","100-105","105-110","110-115","115-120"],j=t=>{const o=new Array(x.length).fill(0);t==null||t.forEach(s=>{s.data_list.forEach(a=>{if(a>0)for(let l=0;l<x.length;l++){const[c,n]=x[l].split("-").map(Number);if(a>=c&&a<n){o[l]+=1;break}}})});const r=t==null?void 0:t.reduce((s,a)=>s+a.data_list.filter(l=>l>0).length,0),e=o.map(s=>(s/r*100).toFixed(0));return{xaxis:x,data:e}},g=(()=>{if(p==="number"){if(f==="apneaIndexDistribution"){const{xaxis:t,data:o}=M(u);return t.map((r,e)=>({number:r,value:o[e]}))}else if(f==="heartRateDistribution"){const{xaxis:t,data:o}=j(u);return t.map((r,e)=>({number:r,value:o[e]}))}else if(f==="breathRateDistribution"){const{xaxis:t,data:o}=C(u);return t.map((r,e)=>({number:r,value:o[e]}))}}if(p==="hour")if(u&&u.length>0&&f==="durationDistribution"){const{xaxis:t,data:o}=z(u);return t.map((r,e)=>({hour:r,percentage:parseInt(r,10),value:o[e]}))}else if(u&&u.length>0&&f==="fallAsleepDurationDistribution"){const{xaxis:t,data:o}=R(u);return t.map((r,e)=>({hour:r,percentage:parseInt(r,10),value:o[e]}))}else return Array.from({length:w},(t,o)=>({hour:o,value:0,percentage:0}));else if(p==="percentage")if(f==="efficiencyDistribution"||f==="deepSleepPercentageDistribution"){const{xaxis:t,data:o}=E(u);return t.map((r,e)=>({percentage:r,value:o[e]}))}else{const t=Array.from({length:11},(r,e)=>e*10),o=new Map(u.map(r=>[Math.floor(r.sleep_efficiency/10)*10,{value:r.sleep_efficiency,date:r.date}]));return t.map(r=>{var e,s;return{percentage:r,value:((e=o.get(r))==null?void 0:e.value)||0,date:((s=o.get(r))==null?void 0:s.date)||null}})}else{const o=((e,s)=>{const a=[],l=new Date(e),c=new Date(s);for(;l<=c;)a.push(new Date(l).toISOString().split("T")[0]),l.setDate(l.getDate()+1);return a})(v,_),r=new Map(u==null?void 0:u.map(e=>{var s,a,l,c;return[((s=e==null?void 0:e.date)==null?void 0:s.split("T")[0])||(f==="roomInOut"||f==="walkingStepsStatistix"?P(e.datestr).subtract(1,"day").format("YYYY-MM-DD"):e==null?void 0:e.datestr),e.ratio||f==="walkingSpeedStatistic"&&((a=e==null?void 0:e.user_activity)==null?void 0:a.speed)||e.bed_exit_duration||e.value||e.sleep_time||e.ahi||f==="walkingStepsStatistix"&&((l=e==null?void 0:e.user_activity)==null?void 0:l.step_number)||e.anomalyHeartRate||e.sleep_efficiency||(e.leave_bed_count&&f==="numberOfBedExitTime"?e.leave_bed_count:null)||(e.sleep_quality&&f!=="numberOfBedExitTime"&&f!=="roomInOut"&&f==="deepSleepPercentageStatistic"?e.sleep_quality:null)||((c=e==null?void 0:e.user_activity)!=null&&c.entry_room_count&&f==="roomInOut"?e==null?void 0:e.user_activity.entry_room_count:null)||f==="sleedDurationStatistic"&&e.sleep_total_time||e.totalFallAsleepDuration||"--"]}));return o.map(e=>({date:e,value:r.get(e)||0}))}})(),A=(t,o="axis")=>{if(p==="percentage"||b==="percentage")return`${t}%`;if(b==="duration"){const r=Math.floor(t/60),e=t%60;return r>0?`${r}h ${e}m`:`${e}m`}return t},D=t=>{if(p==="number")return t==null?void 0:t.toString();if(p==="hour")return`${t}`;if(p==="percentage")return`${t}%`;if(S==="Week"){const r=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],e=new Date(t);return r[e.getDay()]}return new Date(t).toLocaleDateString("en-US",{month:"2-digit",day:"2-digit"}).replace("/","-")};return{xAxis:{type:"category",data:g.map(t=>D(p==="hour"?t.hour:p==="percentage"?t.percentage:p==="number"?t.number:t.date))},grid:{top:"5%",left:"8%",bottom:"5%",right:"2%"},yAxis:{type:"value",axisLabel:{formatter:A},max:p==="percentage"||b==="percentage"?100:void 0},series:[{data:g.map(t=>t.value),type:"bar",barWidth:10,itemStyle:{color:m||"#000",borderRadius:[50,50,0,0]}}],tooltip:{trigger:"axis",formatter:t=>{if(p==="number")if(f!=="apneaIndexDistribution"){const e=g[t[0].dataIndex];return`<div style="margin-top: 4px">
              <span >${e.value}%</span>
              <br>
              <span style="font-weight: bold">${e.number} BPM</span>
              </div>`}else{const e=g[t[0].dataIndex];return`<div style="margin-top: 4px">
              <span style="font-weight: bold">${e.value}%</span>
              <br>
              <span style="font-weight: normal">${e.number}</span>
              </div>`}else if(p==="hour"){const e=g[t[0].dataIndex];return`<div style="margin-top: 4px">
                    ${e.value?`<span>${e.value}%</span>`:"--"}
                    <br>
                    <span style="font-weight: bold">${e.hour}</span>
                    </div>`}else if(p==="percentage"){const e=g[t[0].dataIndex];if(e.date){const s=new Date(e.date).toLocaleDateString("en-US",{year:"numeric",month:"2-digit",day:"2-digit"}).replace(/\//g,"-");return`<div style="font-weight: bold">${e.value}%</div>
                     <div style="margin-top: 4px">${s}</div>`}return`<div style="font-weight: bold"> ${e.value}% <br/> <span style="font-weight: normal">${e.percentage}%</span></div>`}const o=g[t[0].dataIndex].date;return`<div style="font-weight: bold">${new Date(o).toLocaleDateString("en-US",{year:"numeric",month:"2-digit",day:"2-digit"}).replace(/\//g,"-")}</div>
                  <div style="margin-top: 4px">${A(t[0].value)}${B}</div>`}}}},[u,b,m,S,v,_,p,w,I]);return!(u!=null&&u.length)||!$?k.jsxs("div",{className:"w-full h-full flex items-center justify-center",children:[" ",k.jsx(N,{description:"No data available to show"})]}):k.jsx(T,{option:$,style:{height:"350px"}})}export{L as default};
//# sourceMappingURL=barChart-BjTyEe7P.js.map
