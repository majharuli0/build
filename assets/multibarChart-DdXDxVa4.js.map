{"version":3,"file":"multibarChart-DdXDxVa4.js","sources":["../../node_modules/dayjs/plugin/isSameOrAfter.js","../../node_modules/dayjs/plugin/isSameOrBefore.js","../../src/Components/GraphAndChart/multibarChart.jsx"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_isSameOrAfter=t()}(this,(function(){\"use strict\";return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}}}));","!function(e,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_isSameOrBefore=i()}(this,(function(){\"use strict\";return function(e,i){i.prototype.isSameOrBefore=function(e,i){return this.isSame(e,i)||this.isBefore(e,i)}}}));","import React, { useEffect, useState, useMemo, useContext } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport dayjs from \"dayjs\";\nimport isSameOrAfter from \"dayjs/plugin/isSameOrAfter\";\nimport isSameOrBefore from \"dayjs/plugin/isSameOrBefore\";\nimport { SidebarContext } from \"@/Context/CustomContext\";\nimport { Empty } from \"antd\";\n\n// Extend dayjs with the plugins\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport default function MultibarChart({\n  data,\n  fromDate,\n  toDate,\n  valueType = \"duration\",\n}) {\n  const [chartData, setChartData] = useState([]);\n  const { sleepEventsType, sleepEventsColor } = useContext(SidebarContext);\n\n  useEffect(() => {\n    setChartData(Array.isArray(data) ? data : []);\n  }, [data]);\n\n  const formatValue = (value, type) => {\n    if (type === \"duration\") {\n      const hours = Math.floor(value / 60);\n      const minutes = value % 60;\n      return `${hours}hr ${minutes}m`;\n    }\n    // For time or number type values, return as is\n    return value.toString();\n  };\n\n  const chartOptions = useMemo(() => {\n    // Generate all dates between fromDate and toDate\n    const getAllDates = (start, end) => {\n      const dates = [];\n      let currentDate = dayjs(start);\n      const endDate = dayjs(end);\n\n      while (currentDate.isSameOrBefore(endDate)) {\n        dates.push(currentDate.format(\"YYYY-MM-DD\"));\n        currentDate = currentDate.add(1, \"day\");\n      }\n      return dates;\n    };\n\n    const allDates = getAllDates(fromDate, toDate);\n\n    // Create a map of existing data indexed by date\n    const dataByDate = (Array.isArray(chartData) ? chartData : []).reduce(\n      (acc, item) => {\n        if (!item?.date || !item?.data) return acc;\n        const dateKey = dayjs(item.date).format(\"YYYY-MM-DD\");\n        acc[dateKey] = item.data;\n        return acc;\n      },\n      {}\n    );\n\n    // Get unique status values from the actual data\n    const activeStatuses = [\n      ...new Set(\n        (Array.isArray(chartData) ? chartData : []).flatMap(\n          (item) => item?.data?.map((d) => d.status) || []\n        )\n      ),\n    ];\n\n    // Filter sleepEventsType to only include active events\n    const activeEvents = Object.entries(sleepEventsType).filter(([status]) =>\n      activeStatuses.includes(status)\n    );\n\n    // Create series only for events that exist in the data\n    const series = activeEvents.map(([status, label]) => {\n      const seriesData = allDates.map((date) => {\n        const dayData = dataByDate[date];\n        const eventData = dayData?.find((d) => d.status === status);\n        const value = eventData ? Number(eventData.value) : 0;\n        return value;\n      });\n\n      return {\n        name: label,\n        type: \"bar\",\n        stack: \"total\",\n        data: seriesData,\n        itemStyle: { color: sleepEventsColor[label] },\n      };\n    });\n\n    return {\n      tooltip: {\n        trigger: \"axis\",\n        axisPointer: { type: \"shadow\" },\n        formatter: (params) => {\n          let tooltipText = `${params[0].axisValue}<br/>`;\n          params.forEach((param) => {\n            if (param.value > 0) {\n              tooltipText += `${param.marker} ${\n                param.seriesName\n              }: ${formatValue(param.value, valueType)}<br/>`;\n            }\n          });\n          return tooltipText;\n        },\n      },\n      legend: {\n        data: activeEvents.map(([_, label]) => label),\n      },\n      xAxis: {\n        type: \"category\",\n        data: allDates,\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          formatter: (value) => formatValue(value, valueType),\n        },\n      },\n      series,\n    };\n  }, [\n    chartData,\n    fromDate,\n    toDate,\n    sleepEventsType,\n    sleepEventsColor,\n    valueType,\n  ]);\n\n  if (data?.length === 0 || !toDate || !fromDate) {\n    return <Empty description=\"No data available to show\" />;\n  }\n\n  return <ReactECharts option={chartOptions} style={{ height: \"350px\" }} />;\n}\n"],"names":["e","t","module","this","i","dayjs","isSameOrAfter","isSameOrBefore","MultibarChart","data","fromDate","toDate","valueType","chartData","setChartData","useState","sleepEventsType","sleepEventsColor","useContext","SidebarContext","useEffect","formatValue","value","type","hours","minutes","chartOptions","useMemo","allDates","start","end","dates","currentDate","endDate","dataByDate","acc","item","dateKey","activeStatuses","_a","d","activeEvents","status","series","label","seriesData","date","dayData","eventData","params","tooltipText","param","_","jsx","Empty","ReactECharts"],"mappings":"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","x_google_ignoreList":[0,1]}